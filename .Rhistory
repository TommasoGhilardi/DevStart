ggplot() +
# Dashed reference lines
geom_vline(xintercept = 0, linetype = "dashed", color = "darkgray") +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(
data = df_brush,
aes(x = time, y = est_performance),
color = "#e04d01",
size  = 1
) +
# Intercept (brush) point & error bar
geom_point(
aes(x = 0, y = intercept_brush),
size  = 3,
color = "darkred"
) +
geom_errorbar(
aes(
x    = 0,
y    = intercept_brush,
ymin = intercept_brush - intercept_brush_se,
ymax = intercept_brush + intercept_brush_se
),
color = "darkred",
size  = 1.3
) +
# Label for the intercept
annotate("text", x = -0.5, y = 2.825, label = "(Intercept)") +
# Curved arrow with a slight horizontal offset (x != xend)
geom_textcurve(
# Start at (2.99, 2.83), end at (3.01, 2.89)
# so there's enough horizontal length to create a "belly."
aes(
x    = 2.99,  y    = 2.83,
xend = 3.01,  yend = 3.2
),
label     = expression(beta ~ "Time"),  # or "\u03B2 Time"
curvature = .4,  # how “bendy” the arc is
arrow = arrow(
ends   = "both"),
colour = "#e04d01",
size   = 4,
lwd    = 1.2
) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
library(ggplot2)
model_p = parameters(mod)
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
# To create estimates
time_values <- seq(0, 10, by = 0.5)
ggplot()+
# Cartesian lines
geom_vline(xintercept = 0, lwd =1.1) +
geom_point(aes(x=0, y=intercept_brush), size=3, color = 'darkred')+
geom_errorbar(aes(x=0, y=intercept_brush, ymin= intercept_brush-intercept_brush_se, ymax= intercept_brush+intercept_brush_se), color = 'darkred', lwd=1.3)+
# Plot addition information
coord_cartesian(xlim = c(-1,5), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)+
scale_x_continuous(
breaks = c(0),              # The x-values where you want ticks
labels = c("0\nBrush")  # Corresponding custom labels
)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
library(ggplot2)
model_p = parameters(mod)
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
# To create estimates
time_values <- seq(0, 10, by = 0.5)
ggplot()+
# Cartesian lines
geom_vline(xintercept = 0, lwd =0.8) +
geom_point(aes(x=0, y=intercept_brush), size=3, color = 'darkred')+
geom_errorbar(aes(x=0, y=intercept_brush, ymin= intercept_brush-intercept_brush_se, ymax= intercept_brush+intercept_brush_se), color = 'darkred', lwd=1.3)+
# Plot addition information
coord_cartesian(xlim = c(-1,5), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)+
scale_x_continuous(
breaks = c(0),              # The x-values where you want ticks
labels = c("0\nBrush")  # Corresponding custom labels
)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
library(ggplot2)
model_p = parameters(mod)
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
# To create estimates
time_values <- seq(0, 10, by = 0.5)
ggplot()+
# Cartesian lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_point(aes(x=0, y=intercept_brush), size=3, color = 'darkred')+
geom_errorbar(aes(x=0, y=intercept_brush, ymin= intercept_brush-intercept_brush_se, ymax= intercept_brush+intercept_brush_se), color = 'darkred', lwd=1.3)+
# Plot addition information
coord_cartesian(xlim = c(-1,5), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)+
scale_x_continuous(
breaks = c(0),              # The x-values where you want ticks
labels = c("0\nBrush")  # Corresponding custom labels
)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
intercept_hammer <- model_p[3,2] + intercept_brush
intercept_hammer_se <- model_p[3,3]
intercept_spoon <- model_p[4,2]+ intercept_brush
intercept_spoon_se <- model_p[4,3]
ggplot() +
# Cartesian lines
geom_vline(xintercept = 0, lwd =0.4) +
# Intercept (brush)
geom_point(aes(x=0, y=intercept_brush), size=3, color = 'darkred')+
geom_errorbar(aes(x=0, y=intercept_brush, ymin= intercept_brush-intercept_brush_se, ymax= intercept_brush+intercept_brush_se), color = 'darkred', lwd=1.3)+
# Hammer
geom_point(aes(x=1, y=intercept_hammer), size=3, color = 'darkblue')+
geom_errorbar(aes(x=1, y=intercept_hammer, ymin= intercept_hammer-intercept_hammer_se, ymax= intercept_hammer+intercept_hammer_se), color = 'darkblue', lwd=1.3)+
# Spoon
geom_point(aes(x=2, y=intercept_spoon), size=3, color = 'darkgreen')+
geom_errorbar(aes(x=2, y=intercept_spoon, ymin= intercept_spoon-intercept_spoon_se, ymax= intercept_spoon+intercept_spoon_se), color = 'darkgreen', lwd=1.3)+
# Set the limits for x and y axes
coord_cartesian(xlim = c(-.5,2.5), ylim = c(-1,10))+
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('0\nBrush','Hammer','Spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
model_p
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
library(ggplot2)
library(geomtextpath)
# Suppose these come from your model
# (Using placeholders for illustration)
intercept_brush    <- 2.83
intercept_brush_se <- 0.06
slope_brush    <- 0.20
slope_brush_se <- 0.03
# Some hypothetical time values
time_values <- seq(-1, 4, by = 0.25)
# Create a small data frame for the main (brush) line
df_brush <- data.frame(
time            = time_values,
est_performance = intercept_brush + slope_brush * time_values
)
ggplot() +
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(
data = df_brush,
aes(x = time, y = est_performance),
color = "#e04d01",
size  = 1
) +
# Intercept (brush) point & error bar
geom_point(
aes(x = 0, y = intercept_brush),
size  = 3,
color = "darkred"
) +
geom_errorbar(
aes(
x    = 0,
y    = intercept_brush,
ymin = intercept_brush - intercept_brush_se,
ymax = intercept_brush + intercept_brush_se
),
color = "darkred",
size  = 1.3
) +
# Label for the intercept
annotate("text", x = -0.5, y = 2.825, label = "(Intercept)") +
# Curved arrow with a slight horizontal offset (x != xend)
geom_textcurve(
# Start at (2.99, 2.83), end at (3.01, 2.89)
# so there's enough horizontal length to create a "belly."
aes(
x    = 2.99,  y    = 2.83,
xend = 3.01,  yend = 3.2
),
label     = expression(beta ~ "Time"),  # or "\u03B2 Time"
curvature = .4,  # how “bendy” the arc is
arrow = arrow(
ends   = "both"),
colour = "#e04d01",
size   = 4,
lwd    = 1.2
) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
model_p
model_p[2,2]
model_p[2,2]
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
library(ggplot2)
library(geomtextpath)
intercept_brush    <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
slope_brush    <- model_p[2,2]
slope_brush_se <- model_p[2,3]
# Some hypothetical time values
time_values <- seq(-1, 4, by = 0.25)
# Create a small data frame for the main (brush) line
df_brush <- data.frame(
time            = time_values,
est_performance_brush = intercept_brush + slope_brush * time_values
)
ggplot() +
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(
data = df_brush,
aes(x = time, y = est_performance_brush),
color = "#e04d01",
size  = 1
) +
# Intercept (brush) point & error bar
geom_point(
aes(x = 0, y = intercept_brush),
size  = 3,
color = "darkred"
) +
geom_errorbar(
aes(
x    = 0,
y    = intercept_brush,
ymin = intercept_brush - intercept_brush_se,
ymax = intercept_brush + intercept_brush_se
),
color = "darkred",
size  = 1.3
) +
# Label for the intercept
annotate("text", x = -0.5, y = 2.825, label = "(Intercept)") +
# Curved arrow with a slight horizontal offset (x != xend)
geom_textcurve(
# Start at (2.99, 2.83), end at (3.01, 2.89)
# so there's enough horizontal length to create a "belly."
aes(
x    = 2.99,  y    = 2.83,
xend = 3.01,  yend = 3.2
),
label     = expression(beta ~ "Time"),  # or "\u03B2 Time"
curvature = .4,  # how “bendy” the arc is
arrow = arrow(
ends   = "both"),
colour = "#e04d01",
size   = 4,
lwd    = 1.2
) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
model_p
library(ggplot2)
library(geomtextpath)
intercept_brush    <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
slope_brush    <- model_p[2,2]
slope_brush_se <- model_p[2,3]
slope_hammer = model_p[5,2]
slope_hammer_se = model_p[5,3]
# Some hypothetical time values
time_values <- seq(-1, 4, by = 0.25)
# Create a small data frame for the main (brush) line
df_brush <- data.frame(
time            = time_values,
est_performance_brush = intercept_brush + slope_brush * time_values,
est_performance_hammer = intercept_brush + (slope_brush + slope_hammer) * time_values
)
ggplot()+
geom_line(data= df_brush, aes(x= time, y= est_performance_hammer))
library(ggplot2)
library(geomtextpath)
intercept_brush    <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
slope_brush    <- model_p[2,2]
slope_brush_se <- model_p[2,3]
slope_hammer = model_p[5,2]
slope_hammer_se = model_p[5,3]
# Some hypothetical time values
time_values <- seq(-1, 4, by = 0.25)
# Create a small data frame for the main (brush) line
df_brush <- data.frame(
time            = time_values,
est_performance_brush = intercept_brush + slope_brush * time_values,
est_performance_hammer = intercept_brush + (slope_brush + slope_hammer) * time_values
)
ggplot()+
geom_line(data= df_brush, aes(x= time, y= est_performance_brush))+
geom_line(data= df_brush, aes(x= time, y= est_performance_hammer))
# # Curved arrow with a slight horizontal offset (x != xend)
# geom_textcurve(
#   # Start at (2.99, 2.83), end at (3.01, 2.89)
#   # so there's enough horizontal length to create a "belly."
#   aes(
#     x    = 2.99,  y    = 2.83,
#     xend = 3.01,  yend = 3.2
#   ),
#   label     = expression(beta ~ "Time"),  # or "\u03B2 Time"
#   curvature = .4,  # how “bendy” the arc is
#   arrow = arrow(
#     ends   = "both"),
#   colour = "#e04d01",
#   size   = 4,
#   lwd    = 1.2
# geom_textcurve(
#   # Start at (2.99, 2.83), end at (3.01, 2.89)
#   # so there's enough horizontal length to create a "belly."
#   aes(
#     x    = 2.99,  y    = 2.83,
#     xend = 3.01,  yend = 3.2
#   ),
#   label     = expression(beta ~ "Time"),  # or "\u03B2 Time"
#   curvature = .4,  # how “bendy” the arc is
#   arrow = arrow(
#     ends   = "both"),
#   colour = "#e04d01",
#   size   = 4,
#   lwd    = 1.2
# ) +
ggplot() +
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(
data = df_brush,
aes(x = time, y = est_performance_brush),
color = "#e04d01",
size  = 1
) +
# Intercept (brush) point & error bar
geom_point(
aes(x = 0, y = intercept_brush),
size  = 3,
color = "darkred"
) +
geom_errorbar(
aes(
x    = 0,
y    = intercept_brush,
ymin = intercept_brush - intercept_brush_se,
ymax = intercept_brush + intercept_brush_se
),
color = "darkred",
size  = 1.3
) +
# Label for the intercept
annotate("text", x = -0.5, y = 2.825, label = "(Intercept)") +
# Curved arrow with a slight horizontal offset (x != xend)
# geom_textcurve(
#   # Start at (2.99, 2.83), end at (3.01, 2.89)
#   # so there's enough horizontal length to create a "belly."
#   aes(
#     x    = 2.99,  y    = 2.83,
#     xend = 3.01,  yend = 3.2
#   ),
#   label     = expression(beta ~ "Time"),  # or "\u03B2 Time"
#   curvature = .4,  # how “bendy” the arc is
#   arrow = arrow(
#     ends   = "both"),
#   colour = "#e04d01",
#   size   = 4,
#   lwd    = 1.2
# ) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
ggplot()+
# The main 'brush' line
geom_line(data = df_brush, aes(x = time, y = est_performance_brush), color = "#e04d01", size  = 1) +
geom_line(data = df_brush, aes(x = time, y = est_performance_hammer), color = "darkblue", size  = 1)
ggplot()+
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(data = df_brush, aes(x = time, y = est_performance_brush), color = "#e04d01", size  = 1) +
geom_line(data = df_brush, aes(x = time, y = est_performance_hammer), color = "darkblue", size  = 1)
ggplot()+
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(data = df_brush, aes(x = time, y = est_performance_brush), color = "#e04d01", size  = 1) +
geom_line(data = df_brush, aes(x = time, y = est_performance_hammer), color = "darkblue", size  = 1)+
theme_bw(base_size = 20)
ggplot()+
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(data = df_brush, aes(x = time, y = est_performance_brush), color = "#e04d01", size  = 1) +
geom_line(data = df_brush, aes(x = time, y = est_performance_hammer), color = "darkblue", size  = 1)+
theme_bw(base_size = 20)
library(ggplot2)
library(geomtextpath)
intercept_brush    <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
slope_brush    <- model_p[2,2]
slope_brush_se <- model_p[2,3]
slope_hammer = model_p[5,2]
slope_hammer_se = model_p[5,3]
# Some hypothetical time values
time_values <- seq(-1, 4, by = 0.25)
# Create a small data frame for the main (brush) line
df_brush <- data.frame(
time            = time_values,
est_performance_brush = intercept_brush + slope_brush * time_values,
est_performance_hammer = intercept_brush + (slope_brush + slope_hammer) * time_values
)
ggplot()+
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(data = df_brush, aes(x = time, y = est_performance_brush), color = "#e04d01", size  = 1) +
geom_line(data = df_brush, aes(x = time, y = est_performance_hammer), color = "darkblue", size  = 1)+
theme_bw(base_size = 20)+
labs(y='Performance', x='Time')
library(ggplot2)
library(geomtextpath)
intercept_brush    <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
slope_brush    <- model_p[2,2]
slope_brush_se <- model_p[2,3]
slope_hammer = model_p[5,2]
slope_hammer_se = model_p[5,3]
slope_spoon = model_p[6,2]
slope_spoon_se = model_p[6,3]
# Some hypothetical time values
time_values <- seq(-1, 4, by = 0.25)
# Create a small data frame for the main (brush) line
df_brush <- data.frame(
time            = time_values,
est_performance_brush = intercept_brush + slope_brush * time_values,
est_performance_hammer = intercept_brush + (slope_brush + slope_hammer) * time_values,
est_performance_spoon = intercept_brush + (slope_brush + slope_spoon) * time_values
)
ggplot()+
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(data = df_brush, aes(x = time, y = est_performance_brush), color = "#e04d01", size  = 1) +
geom_line(data = df_brush, aes(x = time, y = est_performance_hammer), color = "darkblue", size  = 1)+
geom_line(data = df_brush, aes(x = time, y = est_performance_hammer), color = "darkgreen", size  = 1)+
theme_bw(base_size = 20)+
labs(y='Performance', x='Time')
library(ggplot2)
library(geomtextpath)
intercept_brush    <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
slope_brush    <- model_p[2,2]
slope_brush_se <- model_p[2,3]
slope_hammer = model_p[5,2]
slope_hammer_se = model_p[5,3]
slope_spoon = model_p[6,2]
slope_spoon_se = model_p[6,3]
# Some hypothetical time values
time_values <- seq(-1, 4, by = 0.25)
# Create a small data frame for the main (brush) line
df_brush <- data.frame(
time            = time_values,
est_performance_brush = intercept_brush + slope_brush * time_values,
est_performance_hammer = intercept_brush + (slope_brush + slope_hammer) * time_values,
est_performance_spoon = intercept_brush + (slope_brush + slope_spoon) * time_values
)
ggplot()+
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(data = df_brush, aes(x = time, y = est_performance_brush), color = "#e04d01", size  = 1) +
geom_line(data = df_brush, aes(x = time, y = est_performance_hammer), color = "darkblue", size  = 1)+
geom_line(data = df_brush, aes(x = time, y = est_performance_spoon), color = "darkgreen", size  = 1)+
theme_bw(base_size = 20)+
labs(y='Performance', x='Time')
