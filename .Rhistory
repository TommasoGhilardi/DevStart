slope_hammer = model_p[5,2]
slope_hammer_se = model_p[5,3]
slope_spoon = model_p[6,2]
slope_spoon_se = model_p[6,3]
# Some hypothetical time values
time_values <- seq(-1, 4, by = 0.25)
# Create a small data frame for the main (brush) line
df_brush <- data.frame(
time            = time_values,
est_performance_brush = intercept_brush + slope_brush * time_values,
est_performance_hammer = intercept_brush + (slope_brush + slope_hammer) * time_values,
est_performance_spoon = intercept_brush + (slope_brush + slope_spoon) * time_values
)
ggplot()+
# Dashed reference lines
geom_vline(xintercept = 0, lwd =0.4) +
geom_hline(yintercept = intercept_brush, linetype = "dashed", color = "darkgray") +
# The main 'brush' line
geom_line(data = df_brush, aes(x = time, y = est_performance_brush), color = "#e04d01", size  = 1) +
geom_line(data = df_brush, aes(x = time, y = est_performance_hammer), color = "darkblue", size  = 1)+
geom_line(data = df_brush, aes(x = time, y = est_performance_spoon), color = "darkgreen", size  = 1)+
theme_bw(base_size = 20)+
labs(y='Performance', x='Time')
setwd("C:/Users/tomma/OneDrive - Birkbeck, University of London/Personal/Web/DevStart/CONTENT/EyeTracking")
install.packages("faux")
devtools::install_github("debruine/faux")
install.packages('devtools')
devtools::install_github("debruine/faux")
remotes::install_github("debruine/faux")
remotes::install_github("debruine/faux", force = TRUE)
2
#| message: false
#| warning: false
library(PupillometryR)  # Library to process pupil signal
library(tidyverse)  # Library to wrangle dataframes
library(patchwork)
#| message: false
#| warning: false
csv_files = list.files(
path       = "..\\..\\resources\\Pupillometry\\RAW",
pattern    = "\\.csv$",   # regex pattern to match .csv files
full.names = TRUE         # returns the full file paths
)
Raw_data = read.csv(csv_files[1])
head(Raw_data) # database peak
#| warnings: false
#| fig-width: 20
#| fig-height: 14
ggplot(Raw_data, aes(x = time, y = R_P)) +
geom_line(aes(y = R_P, color = 'Pupil Right'), lwd = 1.2) +
geom_line(aes(y = L_P, color = 'Pupil Left'), lwd = 1.2) +
geom_vline(data = Raw_data |> dplyr::filter(!is.na(Event)), aes(xintercept = time, linetype = Event), lwd = 1.3) +
theme_bw(base_size = 35) +
ylim(1, 6) +
labs(color= 'Signal', y='Pupil size')+
scale_color_manual(
values = c('Pupil Right' = '#4A6274', 'Pupil Left' = '#E2725A') )  +
theme(
legend.position = 'bottom'  ) +
guides(
color = guide_legend(override.aes = list(lwd = 20)),
linetype = guide_legend(override.aes = list(lwd = 1.2))
)
Events_to_keep = c('Circle','Square')
Events = filter(Raw_data, Event %in% Events_to_keep) # filter data
head(Events) # database peak
# Settings to cut events
Fs = 300 # framerate
Step = 1000/Fs
Pre_stim = 100 # pre stimulus time (100ms)
Post_stim = 2000 # post stimulus time (2000ms)
Pre_stim_samples = Pre_stim/Step  # pre stimulus in samples
Post_stim_samples = Post_stim/Step  # post stimulus in samples
# Time vector based on the event duration
Time = seq(from = -Pre_stim, by=Step, length.out = Pre_stim_samples+Post_stim_samples) # time vector
# Loop for each event
for (trial in 1:nrow(Events)){
# Extract the information
Event = Events[trial,]$Event
TrialN = Events[trial,]$TrialN
# Event onset information
Onset = Events[trial,]$time
Onset_index = which.min(abs(Raw_data$time - Onset))
# Find the rows to update based on pre post samples
rows_to_update = seq(Onset_index - Pre_stim_samples,
Onset_index + Post_stim_samples-1)
# Repeat the values of interest for all the rows
Raw_data[rows_to_update, 'time'] = Time
Raw_data[rows_to_update, 'Event'] = Event
Raw_data[rows_to_update, 'TrialN'] = TrialN
}
#| message: false
#| warning: false
Trial_data = Raw_data %>%
filter(Event %in% Events_to_keep)
#| message: false
#| warning: false
# Libraries and files --------------------------------------------------------------------
library(PupillometryR)  # Library to process pupil signal
library(tidyverse)  # Library to wrangle dataframes
library(patchwork)
csv_files = list.files(
path       = "..\\..\\resources\\Pupillometry\\RAW",
pattern    = "\\.csv$",   # regex pattern to match .csv files
full.names = TRUE         # returns the full file paths
)
# Event settings --------------------------------------------------------------------
Fs = 300 # framerate
Step = 1000/Fs
Pre_stim = 100 # pre stimulus time (100ms)
Post_stim = 2000 # post stimulus time (2000ms)
Pre_stim_samples = Pre_stim/Step  # pre stimulus in samples
Post_stim_samples = Post_stim/Step  # post stimulus in samples
# Time vector based on the event duration
Time = seq(from = -Pre_stim, by=Step, length.out = Pre_stim_samples+Post_stim_samples) # time vector
# Event fixes --------------------------------------------------------------------
List_of_subject_dataframes = list() # Empty list to be filled with dataframes
# Loop for each subject
for (sub in 1:length(csv_files)) {
Raw_data = read.csv(csv_files[sub]) # Raw data
Events = filter(Raw_data, Event %in% Events_to_keep) # Events
# Loop for each event
for (trial in 1:nrow(Events)){
# Extract the information
Event = Events[trial,]$Event
TrialN = Events[trial,]$TrialN
# Event onset information
Onset = Events[trial,]$time
Onset_index = which.min(abs(Raw_data$time - Onset))
# Find the rows to update based on pre post samples
rows_to_update = seq(Onset_index - Pre_stim_samples,
Onset_index + Post_stim_samples-1)
# Repeat the values of interest for all the rows
Raw_data[rows_to_update, 'time'] = Time
Raw_data[rows_to_update, 'Event'] = Event
Raw_data[rows_to_update, 'TrialN'] = TrialN
}
# Filter only events of interest
Trial_data = Raw_data %>%
filter(Event %in% Events_to_keep)
# Add daframe to list
List_of_subject_dataframes[[sub]] = Trial_data
}
# Combine the list of dataframes into 1 dataframe
Trial_data = bind_rows(List_of_subject_dataframes)
#| message: false
#| warning: false
#| code-fold: true
#| fig-width: 40
#| fig-height: 25
#| fig-dpi: 300
ggplot(Trial_data, aes(x = time, y = R_P, group = TrialN)) +
geom_line(aes(y = R_P, color = 'Pupil Right'), lwd = 1.2) +
geom_line(aes(y = L_P, color = 'Pupil Left'), lwd = 1.2) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', color = 'black', lwd = 1.2) +
facet_wrap(~Subject) +
ylim(1, 6) +
scale_color_manual(values = c('Pupil Right' = '#4A6274', 'Pupil Left' = '#E2725A')) +
theme_bw(base_size = 35) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
PupilR_data = make_pupillometryr_data(data = Trial_data,
subject = Subject,
trial = TrialN,
time = time,
condition = Event)
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
plot(PupilR_data, pupil = L_P, group = 'condition', geom = 'line') +
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| error: true
#| message: false
#| warning: false
Regressed_data = regress_data(data = PupilR_data,
pupil1 = L_P,
pupil2 = R_P)
#| message: false
#| warning: false
# Filter the trial data
Trial_data = Trial_data %>%
group_by(Subject, TrialN) %>%  # group by Subject and TrialN
filter(!all(is.na(L_P) & is.na(R_P))) %>% # filter out if both R_P and L_P are all NA
ungroup()  # Remove grouping
# Make pupilloemtryR data
PupilR_data = make_pupillometryr_data(data = Trial_data,
subject = Subject,
trial = TrialN,
time = time,
condition = Event)
# Regress data
Regressed_data = regress_data(data = PupilR_data,
pupil1 = L_P,
pupil2 = R_P)
#| message: false
#| warning: false
library(PupillometryR)  # Library to process pupil signal
library(tidyverse)  # Library to wrangle dataframes
library(patchwork)
#| message: false
#| warning: false
csv_files = list.files(
path       = "..\\..\\resources\\Pupillometry\\RAW",
pattern    = "\\.csv$",   # regex pattern to match .csv files
full.names = TRUE         # returns the full file paths
)
Raw_data = read.csv(csv_files[1])
head(Raw_data) # database peak
#| warnings: false
#| fig-width: 20
#| fig-height: 14
ggplot(Raw_data, aes(x = time, y = R_P)) +
geom_line(aes(y = R_P, color = 'Pupil Right'), lwd = 1.2) +
geom_line(aes(y = L_P, color = 'Pupil Left'), lwd = 1.2) +
geom_vline(data = Raw_data |> dplyr::filter(!is.na(Event)), aes(xintercept = time, linetype = Event), lwd = 1.3) +
theme_bw(base_size = 35) +
ylim(1, 6) +
labs(color= 'Signal', y='Pupil size')+
scale_color_manual(
values = c('Pupil Right' = '#4A6274', 'Pupil Left' = '#E2725A') )  +
theme(
legend.position = 'bottom'  ) +
guides(
color = guide_legend(override.aes = list(lwd = 20)),
linetype = guide_legend(override.aes = list(lwd = 1.2))
)
Events_to_keep = c('Circle','Square')
Events = filter(Raw_data, Event %in% Events_to_keep) # filter data
head(Events) # database peak
# Settings to cut events
Fs = 300 # framerate
Step = 1000/Fs
Pre_stim = 100 # pre stimulus time (100ms)
Post_stim = 2000 # post stimulus time (2000ms)
Pre_stim_samples = Pre_stim/Step  # pre stimulus in samples
Post_stim_samples = Post_stim/Step  # post stimulus in samples
# Time vector based on the event duration
Time = seq(from = -Pre_stim, by=Step, length.out = Pre_stim_samples+Post_stim_samples) # time vector
# Loop for each event
for (trial in 1:nrow(Events)){
# Extract the information
Event = Events[trial,]$Event
TrialN = Events[trial,]$TrialN
# Event onset information
Onset = Events[trial,]$time
Onset_index = which.min(abs(Raw_data$time - Onset))
# Find the rows to update based on pre post samples
rows_to_update = seq(Onset_index - Pre_stim_samples,
Onset_index + Post_stim_samples-1)
# Repeat the values of interest for all the rows
Raw_data[rows_to_update, 'time'] = Time
Raw_data[rows_to_update, 'Event'] = Event
Raw_data[rows_to_update, 'TrialN'] = TrialN
}
#| message: false
#| warning: false
Trial_data = Raw_data %>%
filter(Event %in% Events_to_keep)
#| message: false
#| warning: false
# Libraries and files --------------------------------------------------------------------
library(PupillometryR)  # Library to process pupil signal
library(tidyverse)  # Library to wrangle dataframes
library(patchwork)
csv_files = list.files(
path       = "..\\..\\resources\\Pupillometry\\RAW",
pattern    = "\\.csv$",   # regex pattern to match .csv files
full.names = TRUE         # returns the full file paths
)
# Event settings --------------------------------------------------------------------
Fs = 300 # framerate
Step = 1000/Fs
Pre_stim = 100 # pre stimulus time (100ms)
Post_stim = 2000 # post stimulus time (2000ms)
Pre_stim_samples = Pre_stim/Step  # pre stimulus in samples
Post_stim_samples = Post_stim/Step  # post stimulus in samples
# Time vector based on the event duration
Time = seq(from = -Pre_stim, by=Step, length.out = Pre_stim_samples+Post_stim_samples) # time vector
# Event fixes --------------------------------------------------------------------
List_of_subject_dataframes = list() # Empty list to be filled with dataframes
# Loop for each subject
for (sub in 1:length(csv_files)) {
Raw_data = read.csv(csv_files[sub]) # Raw data
Events = filter(Raw_data, Event %in% Events_to_keep) # Events
# Loop for each event
for (trial in 1:nrow(Events)){
# Extract the information
Event = Events[trial,]$Event
TrialN = Events[trial,]$TrialN
# Event onset information
Onset = Events[trial,]$time
Onset_index = which.min(abs(Raw_data$time - Onset))
# Find the rows to update based on pre post samples
rows_to_update = seq(Onset_index - Pre_stim_samples,
Onset_index + Post_stim_samples-1)
# Repeat the values of interest for all the rows
Raw_data[rows_to_update, 'time'] = Time
Raw_data[rows_to_update, 'Event'] = Event
Raw_data[rows_to_update, 'TrialN'] = TrialN
}
# Filter only events of interest
Trial_data = Raw_data %>%
filter(Event %in% Events_to_keep)
# Add daframe to list
List_of_subject_dataframes[[sub]] = Trial_data
}
# Combine the list of dataframes into 1 dataframe
Trial_data = bind_rows(List_of_subject_dataframes)
#| message: false
#| warning: false
#| code-fold: true
#| fig-width: 40
#| fig-height: 25
#| fig-dpi: 300
ggplot(Trial_data, aes(x = time, y = R_P, group = TrialN)) +
geom_line(aes(y = R_P, color = 'Pupil Right'), lwd = 1.2) +
geom_line(aes(y = L_P, color = 'Pupil Left'), lwd = 1.2) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', color = 'black', lwd = 1.2) +
facet_wrap(~Subject) +
ylim(1, 6) +
scale_color_manual(values = c('Pupil Right' = '#4A6274', 'Pupil Left' = '#E2725A')) +
theme_bw(base_size = 35) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
PupilR_data = make_pupillometryr_data(data = Trial_data,
subject = Subject,
trial = TrialN,
time = time,
condition = Event)
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
plot(PupilR_data, pupil = L_P, group = 'condition', geom = 'line') +
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| error: true
#| message: false
#| warning: false
Regressed_data = regress_data(data = PupilR_data,
pupil1 = L_P,
pupil2 = R_P)
remotes::install_github("samhforbes/PupillometryR")
remotes::install_github("samhforbes/PupillometryR", force = T)
#| message: false
#| warning: false
library(PupillometryR)  # Library to process pupil signal
library(tidyverse)  # Library to wrangle dataframes
library(patchwork)
#| message: false
#| warning: false
csv_files = list.files(
path       = "..\\..\\resources\\Pupillometry\\RAW",
pattern    = "\\.csv$",   # regex pattern to match .csv files
full.names = TRUE         # returns the full file paths
)
Raw_data = read.csv(csv_files[1])
head(Raw_data) # database peak
#| warnings: false
#| fig-width: 20
#| fig-height: 14
ggplot(Raw_data, aes(x = time, y = R_P)) +
geom_line(aes(y = R_P, color = 'Pupil Right'), lwd = 1.2) +
geom_line(aes(y = L_P, color = 'Pupil Left'), lwd = 1.2) +
geom_vline(data = Raw_data |> dplyr::filter(!is.na(Event)), aes(xintercept = time, linetype = Event), lwd = 1.3) +
theme_bw(base_size = 35) +
ylim(1, 6) +
labs(color= 'Signal', y='Pupil size')+
scale_color_manual(
values = c('Pupil Right' = '#4A6274', 'Pupil Left' = '#E2725A') )  +
theme(
legend.position = 'bottom'  ) +
guides(
color = guide_legend(override.aes = list(lwd = 20)),
linetype = guide_legend(override.aes = list(lwd = 1.2))
)
Events_to_keep = c('Circle','Square')
Events = filter(Raw_data, Event %in% Events_to_keep) # filter data
head(Events) # database peak
# Settings to cut events
Fs = 300 # framerate
Step = 1000/Fs
Pre_stim = 100 # pre stimulus time (100ms)
Post_stim = 2000 # post stimulus time (2000ms)
Pre_stim_samples = Pre_stim/Step  # pre stimulus in samples
Post_stim_samples = Post_stim/Step  # post stimulus in samples
# Time vector based on the event duration
Time = seq(from = -Pre_stim, by=Step, length.out = Pre_stim_samples+Post_stim_samples) # time vector
# Loop for each event
for (trial in 1:nrow(Events)){
# Extract the information
Event = Events[trial,]$Event
TrialN = Events[trial,]$TrialN
# Event onset information
Onset = Events[trial,]$time
Onset_index = which.min(abs(Raw_data$time - Onset))
# Find the rows to update based on pre post samples
rows_to_update = seq(Onset_index - Pre_stim_samples,
Onset_index + Post_stim_samples-1)
# Repeat the values of interest for all the rows
Raw_data[rows_to_update, 'time'] = Time
Raw_data[rows_to_update, 'Event'] = Event
Raw_data[rows_to_update, 'TrialN'] = TrialN
}
#| message: false
#| warning: false
Trial_data = Raw_data %>%
filter(Event %in% Events_to_keep)
#| message: false
#| warning: false
# Libraries and files --------------------------------------------------------------------
library(PupillometryR)  # Library to process pupil signal
library(tidyverse)  # Library to wrangle dataframes
library(patchwork)
csv_files = list.files(
path       = "..\\..\\resources\\Pupillometry\\RAW",
pattern    = "\\.csv$",   # regex pattern to match .csv files
full.names = TRUE         # returns the full file paths
)
# Event settings --------------------------------------------------------------------
Fs = 300 # framerate
Step = 1000/Fs
Pre_stim = 100 # pre stimulus time (100ms)
Post_stim = 2000 # post stimulus time (2000ms)
Pre_stim_samples = Pre_stim/Step  # pre stimulus in samples
Post_stim_samples = Post_stim/Step  # post stimulus in samples
# Time vector based on the event duration
Time = seq(from = -Pre_stim, by=Step, length.out = Pre_stim_samples+Post_stim_samples) # time vector
# Event fixes --------------------------------------------------------------------
List_of_subject_dataframes = list() # Empty list to be filled with dataframes
# Loop for each subject
for (sub in 1:length(csv_files)) {
Raw_data = read.csv(csv_files[sub]) # Raw data
Events = filter(Raw_data, Event %in% Events_to_keep) # Events
# Loop for each event
for (trial in 1:nrow(Events)){
# Extract the information
Event = Events[trial,]$Event
TrialN = Events[trial,]$TrialN
# Event onset information
Onset = Events[trial,]$time
Onset_index = which.min(abs(Raw_data$time - Onset))
# Find the rows to update based on pre post samples
rows_to_update = seq(Onset_index - Pre_stim_samples,
Onset_index + Post_stim_samples-1)
# Repeat the values of interest for all the rows
Raw_data[rows_to_update, 'time'] = Time
Raw_data[rows_to_update, 'Event'] = Event
Raw_data[rows_to_update, 'TrialN'] = TrialN
}
# Filter only events of interest
Trial_data = Raw_data %>%
filter(Event %in% Events_to_keep)
# Add daframe to list
List_of_subject_dataframes[[sub]] = Trial_data
}
# Combine the list of dataframes into 1 dataframe
Trial_data = bind_rows(List_of_subject_dataframes)
#| message: false
#| warning: false
#| code-fold: true
#| fig-width: 40
#| fig-height: 25
#| fig-dpi: 300
ggplot(Trial_data, aes(x = time, y = R_P, group = TrialN)) +
geom_line(aes(y = R_P, color = 'Pupil Right'), lwd = 1.2) +
geom_line(aes(y = L_P, color = 'Pupil Left'), lwd = 1.2) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', color = 'black', lwd = 1.2) +
facet_wrap(~Subject) +
ylim(1, 6) +
scale_color_manual(values = c('Pupil Right' = '#4A6274', 'Pupil Left' = '#E2725A')) +
theme_bw(base_size = 35) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
PupilR_data = make_pupillometryr_data(data = Trial_data,
subject = Subject,
trial = TrialN,
time = time,
condition = Event)
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
plot(PupilR_data, pupil = L_P, group = 'condition', geom = 'line') +
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
Regressed_data = regress_data(data = PupilR_data,
pupil1 = L_P,
pupil2 = R_P)
