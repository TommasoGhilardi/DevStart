#| message: false
#| warning: false
summary(additive_model)
check_model(additive_model)
check_model(additive_model, residual_type = "normal")
performance::check_model(additive_model, residual_type = "normal")
library(tidyverse)
performance::check_model(additive_model, residual_type = "normal")
#| message: false
#| warning: false
library(tidyverse)  # Data manipulation and visualization
library(easystats)  # Easy statistical modeling
data = read.csv("..\\..\\resources\\Pupillometry\\Processed\\Processed_PupilData.csv")
# Make sure Event and Subject are factors
data$Event = as.factor(data$Event)
data$Subject = as.factor(data$Subject)
head(data)
#| message: false
#| warning: false
averaged_data = data %>%
group_by(Subject, Event, TrialN) %>%
summarise(mean_pupil = mean(mean_pupil, na.rm = TRUE))
head(averaged_data)
#| message: false
#| warning: false
library(lmerTest)   # Mixed-effect models library
# The actual model
model_avg = lmer(mean_pupil ~ Event + (1|Subject), data = averaged_data)
summary(model_avg) # summary of the model
#| message: false
#| warning: false
#| code-fold: true
#| fig-align: center
#| fig-height: 20
#| fig-width: 30
# Create a data grid for Event and time
datagrid = get_datagrid(model_avg, by = c('Event'))
# Compute model-based expected values for each level of Event
pred = estimate_expectation(datagrid)
# 'pred' now contains predicted values and confidence intervals for each event condition.
# We can visualize these predictions and overlay them on the observed data.
ggplot() +
# Observed data (jittered points to show distribution)
geom_jitter(data = averaged_data, aes(x=Event, y=mean_pupil, color=Event), width=0.1, alpha=0.5, size = 5) +
# Model-based predictions: points for Predicted values
geom_point(data=pred, aes(x=Event, y=Predicted, fill=Event),
shape=21, size=10) +
# Error bars for the confidence intervals
geom_errorbar(data=pred, aes(x=Event, ymin=Predicted - SE, ymax=Predicted + SE, color=Event),
width=0.2, lwd=1.5) +
theme_bw(base_size = 45)+
theme(legend.position = 'none') +
labs(title="Predicted Means vs. Observed Data",
x="Condition",
y="Baseline-Corrected Pupil Size")
#| message: false
#| warning: false
linear_model = lmer(mean_pupil ~ Event * time + (1|Subject), data = data)
#| message: false
#| warning: false
#| code-fold: true
#| fig-align: center
#| fig-height: 20
#| fig-width: 30
# Let's first compute average pupil size at each time point by condition
data_avg_time = data %>%
group_by(Event, time) %>%
summarise(mean_pupil = mean(mean_pupil, na.rm=TRUE))
# Now let's plot these averages over time
ggplot(data_avg_time, aes(x=time, y=mean_pupil, color=Event)) +
geom_line(lwd=1.5) +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(x = "time (ms)",
y = "Baseline-Corrected Pupil Size")
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 20
#| fig-width: 30
# Create a data grid for Event and time
datagrid = get_datagrid(linear_model, by = c('Event','time'))
# Estimate expectation and uncertainty (Predicted and SE)
Est = estimate_expectation(linear_model, datagrid)
# Plot predictions with confidence intervals and the observed data
ggplot() +
# Real data line
geom_line(data = data_avg_time, aes(x=time, y=mean_pupil, color=Event), lwd=1.5) +
# Predicted ribbons
geom_ribbon(data = Est, aes(x=time, ymin = Predicted - SE, ymax = Predicted + SE,
fill = Event), alpha = 0.2) +
# Predicted lines
geom_line(data = Est, aes(x=time, y=Predicted, color=Event), lwd=1.8,linetype = "dashed") +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(title = "Linear Model Predictions vs. Data",
x = "time (ms)",
y = "Baseline-corrected Pupil Size")
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 15
#| fig-width: 30
library(patchwork)
# Parameters
amp <- 1; freq <- 1; phase <- 0; rate <- 100; dur <- 2
time <- seq(0, dur, by = 1 / rate)
# Sinusoidal wave with noise
wave <- amp * sin(2 * pi * freq * time + phase) + rnorm(length(time), mean = 0, sd = 0.2)
# Plot
one = ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
theme_bw(base_size = 45)+
labs(y='Data')
two = ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
geom_smooth(aes(y=wave, x= time), method = 'lm', color='black', lwd=1.5)+
theme_bw(base_size = 45)+
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank()
)
tree= ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
geom_smooth(aes(y=wave, x= time), method = 'gam', color='black', lwd=1.5)+
theme_bw(base_size = 45)+
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank()
)
one + two + tree
#| message: false
#| warning: false
library("mgcv")
# Additive model
additive_model = bam(mean_pupil ~ Event
+ s(time, by=Event, k=20)
+ s(time, Subject, bs='fs', m=1),
data=data)
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 20
#| fig-width: 30
# Data grid
datagrid = get_datagrid(additive_model, length = 100, include_random = T)
# Estimate expectation and uncertainty (Predicted and SE)
Est = estimate_expectation(additive_model, datagrid, exclude=c("s(time,Subject)"))
# Plot predictions with confidence intervals and the observed data
ggplot() +
# Real data line
geom_line(data = data_avg_time, aes(x=time, y=mean_pupil, color=Event), size=1.5) +
# Predicted ribbons
geom_ribbon(data = Est, aes(x=time, ymin = CI_low, ymax = CI_high,
fill = Event), alpha = 0.2) +
# Predicted lines
geom_line(data = Est, aes(x=time, y=Predicted, color=Event), size=1.8, linetype = "dashed") +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(title = "Additive model Predictions vs. Data",
x = "time (ms)",
y = "Baseline-corrected Pupil Size")
#| message: false
#| warning: false
summary(additive_model)
check_model(additive_model)
check_distribution(additive_model)
check_distribution(additive_model)
install.packages("mgcViz")
mgcViz::check(additive_model)
library(mgcViz)
check(additive_model)
mgcViz::check(additive_model)
gam.check( check(additive_model)
gam.check(additive_model)
check(getViz(additive_model))
#| message: false
#| warning: false
library(PupillometryR)  # Library to process pupil signal
library(tidyverse)  # Library to wrangle dataframes
library(patchwork)
#| message: false
#| warning: false
csv_files = list.files(
path       = "..\\..\\resources\\Pupillometry\\RAW",
pattern    = "\\.csv$",   # regex pattern to match .csv files
full.names = TRUE         # returns the full file paths
)
Raw_data = read.csv(csv_files[1])
head(Raw_data) # database peak
#| warnings: false
#| fig-width: 20
#| fig-height: 14
ggplot(Raw_data, aes(x = time, y = R_P)) +
geom_line(aes(y = R_P, color = 'Pupil Right'), lwd = 1.2) +
geom_line(aes(y = L_P, color = 'Pupil Left'), lwd = 1.2) +
geom_vline(data = Raw_data |> dplyr::filter(!is.na(Event)), aes(xintercept = time, linetype = Event), lwd = 1.3) +
theme_bw(base_size = 35) +
ylim(1, 6) +
labs(color= 'Signal', y='Pupil size')+
scale_color_manual(
values = c('Pupil Right' = '#4A6274', 'Pupil Left' = '#E2725A') )  +
theme(
legend.position = 'bottom'  ) +
guides(
color = guide_legend(override.aes = list(lwd = 20)),
linetype = guide_legend(override.aes = list(lwd = 1.2))
)
Events_to_keep = c('Circle','Square')
Events = filter(Raw_data, Event %in% Events_to_keep) # filter data
head(Events) # database peak
# Settings to cut events
Fs = 300 # framerate
Step = 1000/Fs
Pre_stim = 100 # pre stimulus time (100ms)
Post_stim = 2000 # post stimulus time (2000ms)
Pre_stim_samples = Pre_stim/Step  # pre stimulus in samples
Post_stim_samples = Post_stim/Step  # post stimulus in samples
# Time vector based on the event duration
Time = seq(from = -Pre_stim, by=Step, length.out = Pre_stim_samples+Post_stim_samples) # time vector
# Loop for each event
for (trial in 1:nrow(Events)){
# Extract the information
Event = Events[trial,]$Event
TrialN = Events[trial,]$TrialN
# Event onset information
Onset = Events[trial,]$time
Onset_index = which.min(abs(Raw_data$time - Onset))
# Find the rows to update based on pre post samples
rows_to_update = seq(Onset_index - Pre_stim_samples,
Onset_index + Post_stim_samples-1)
# Repeat the values of interest for all the rows
Raw_data[rows_to_update, 'time'] = Time
Raw_data[rows_to_update, 'Event'] = Event
Raw_data[rows_to_update, 'TrialN'] = TrialN
}
#| message: false
#| warning: false
Trial_data = Raw_data %>%
filter(Event %in% Events_to_keep)
#| message: false
#| warning: false
# Libraries and files --------------------------------------------------------------------
library(PupillometryR)  # Library to process pupil signal
library(tidyverse)  # Library to wrangle dataframes
library(patchwork)
csv_files = list.files(
path       = "..\\..\\resources\\Pupillometry\\RAW",
pattern    = "\\.csv$",   # regex pattern to match .csv files
full.names = TRUE         # returns the full file paths
)
# Event settings --------------------------------------------------------------------
Fs = 300 # framerate
Step = 1000/Fs
Pre_stim = 100 # pre stimulus time (100ms)
Post_stim = 2000 # post stimulus time (2000ms)
Pre_stim_samples = Pre_stim/Step  # pre stimulus in samples
Post_stim_samples = Post_stim/Step  # post stimulus in samples
# Time vector based on the event duration
Time = seq(from = -Pre_stim, by=Step, length.out = Pre_stim_samples+Post_stim_samples) # time vector
# Event fixes --------------------------------------------------------------------
List_of_subject_dataframes = list() # Empty list to be filled with dataframes
# Loop for each subject
for (sub in 1:length(csv_files)) {
Raw_data = read.csv(csv_files[sub]) # Raw data
Events = filter(Raw_data, Event %in% Events_to_keep) # Events
# Loop for each event
for (trial in 1:nrow(Events)){
# Extract the information
Event = Events[trial,]$Event
TrialN = Events[trial,]$TrialN
# Event onset information
Onset = Events[trial,]$time
Onset_index = which.min(abs(Raw_data$time - Onset))
# Find the rows to update based on pre post samples
rows_to_update = seq(Onset_index - Pre_stim_samples,
Onset_index + Post_stim_samples-1)
# Repeat the values of interest for all the rows
Raw_data[rows_to_update, 'time'] = Time
Raw_data[rows_to_update, 'Event'] = Event
Raw_data[rows_to_update, 'TrialN'] = TrialN
}
# Filter only events of interest
Trial_data = Raw_data %>%
filter(Event %in% Events_to_keep)
# Add daframe to list
List_of_subject_dataframes[[sub]] = Trial_data
}
# Combine the list of dataframes into 1 dataframe
Trial_data = bind_rows(List_of_subject_dataframes)
#| message: false
#| warning: false
#| code-fold: true
#| fig-width: 40
#| fig-height: 25
#| fig-dpi: 300
ggplot(Trial_data, aes(x = time, y = R_P, group = TrialN)) +
geom_line(aes(y = R_P, color = 'Pupil Right'), lwd = 1.2) +
geom_line(aes(y = L_P, color = 'Pupil Left'), lwd = 1.2) +
geom_vline(aes(xintercept = 0), linetype = 'dashed', color = 'black', lwd = 1.2) +
facet_wrap(~Subject) +
ylim(1, 6) +
scale_color_manual(values = c('Pupil Right' = '#4A6274', 'Pupil Left' = '#E2725A')) +
theme_bw(base_size = 35) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
PupilR_data = make_pupillometryr_data(data = Trial_data,
subject = Subject,
trial = TrialN,
time = time,
condition = Event)
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
plot(PupilR_data, pupil = L_P, group = 'condition', geom = 'line') +
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| error: true
#| message: false
#| warning: false
Regressed_data = regress_data(data = PupilR_data,
pupil1 = L_P,
pupil2 = R_P)
#| message: false
#| warning: false
# Filter the trial data
Trial_data = Trial_data %>%
group_by(Subject, TrialN) %>%  # group by Subject and TrialN
filter(!all(is.na(L_P) & is.na(R_P))) %>% # filter out if both R_P and L_P are all NA
ungroup()  # Remove grouping
# Make pupilloemtryR data
PupilR_data = make_pupillometryr_data(data = Trial_data,
subject = Subject,
trial = TrialN,
time = time,
condition = Event)
# Regress data
Regressed_data = regress_data(data = PupilR_data,
pupil1 = L_P,
pupil2 = R_P)
#| message: true
#| warning: false
#| fig-height: 25
#| fig-width: 40
Mean_data = calculate_mean_pupil_size(data = Regressed_data,
pupil1 = L_P,
pupil2 = R_P)
plot(Mean_data, pupil = mean_pupil, group = 'condition', geom = 'line')+
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
Filtered_data = filter_data(data = Mean_data,
pupil = mean_pupil,
filter = 'median',
degree = 11)
plot(Filtered_data, pupil = mean_pupil, group = 'condition', geom = 'line')+
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
Missing_data = calculate_missing_data(Filtered_data,
mean_pupil)
head(Missing_data, n=20)
#| echo: true
#| message: true
#| warning: true
Clean_data = clean_missing_data(Filtered_data,
pupil = mean_pupil,
trial_threshold = .75,
subject_trial_threshold = .75)
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
ggplot(Clean_data, aes(x = time, y = mean_pupil, group = TrialN, color= Event))+
geom_line( lwd =1.2)+
geom_vline(aes(xintercept = 0), linetype= 'dashed', color = 'black', lwd =1.2)+
facet_wrap(~Subject)+
ylim(1,6)+
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
labs(y = 'Pupil Size')+
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
Int_data = interpolate_data(data = Clean_data,
pupil = mean_pupil,
type = 'linear')
ggplot(Int_data, aes(x = time, y = mean_pupil, group = TrialN, color = Event))+
geom_line(lwd =1.2)+
geom_vline(aes(xintercept = 0), linetype= 'dashed', color = 'black', lwd =1.2)+
facet_wrap(~Subject)+
ylim(1,6)+
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
labs(y = 'Pupil Size')+
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
Blink_data = detect_blinks_by_velocity(
Clean_data,
mean_pupil,
threshold = 0.1,
extend_forward = 70,
extend_back = 70)
ggplot(Blink_data, aes(x = time, y = mean_pupil, group = TrialN, color=Event))+
geom_line(lwd =1.2)+
geom_vline(aes(xintercept = 0), linetype= 'dashed', color = 'black', lwd =1.2)+
facet_wrap(~Subject)+
ylim(1,6)+
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
labs(y = 'Pupil Size')+
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
Int_data = interpolate_data(data = Blink_data,
pupil = mean_pupil,
type = 'linear')
ggplot(Int_data, aes(x = time, y = mean_pupil, group = TrialN, color=Event))+
geom_line(lwd =1.2)+
geom_vline(aes(xintercept = 0), linetype= 'dashed', color = 'black', lwd =1.2)+
facet_wrap(~Subject)+
ylim(1,6)+
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
labs(y = 'Pupil Size')+
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
NewHz = 20
timebinSize = 1000/NewHz
Downsampled_data = downsample_time_data(data = Int_data,
pupil = mean_pupil,
timebin_size = timebinSize,
option = 'median')
plot(Downsampled_data, pupil = mean_pupil, group = 'condition', geom = 'line') +
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20)))
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
Base_data = baseline_data(data = Downsampled_data,
pupil = mean_pupil,
start = -100,
stop = 0)
# Remove the baseline
Final_data = subset_data(Base_data, start = 0) %>%
select(Subject, Event, TrialN, mean_pupil, time)
#| message: false
#| warning: false
#| fig-height: 25
#| fig-width: 40
One = plot(Final_data, pupil = mean_pupil, group = 'condition', geom = 'line')+
theme_bw(base_size = 45) +
theme(legend.position = 'none')
Two = ggplot(Final_data, aes(x = time, y = mean_pupil, group = TrialN, color = Event))+
geom_line(lwd =1.2)+
geom_vline(aes(xintercept = 0), linetype= 'dashed', color = 'black', lwd =1.2)+
facet_wrap(~Subject)+
theme_bw(base_size = 45) +
theme(
legend.position = 'bottom',
legend.title = element_blank()) +
labs(y = 'Pupil Size')+
guides(color = guide_legend(override.aes = list(lwd = 20)))
# Using patchwork to put the plot together
One / Two
#| message: false
#| warning: false
write.csv(Final_data, "..\\..\\resources\\Pupillometry\\Processed\\Processed_PupilData.csv")
