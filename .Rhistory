data <- simulate_simpson(n = 10, groups = 5, r = 0.5,difference = 1.5) %>%
mutate(V2= (V2 +abs(min(V2)))*10000) %>%
rename(Department = Group)
# Lookup vector: map old values to new ones
lookup <- c(G_1 = "Informatics", G_2 = "English",
G_3 = "Sociology", G_4 = "Biology", G_5 = "Statistics")
# Replace values using the lookup vector
data$Department <- lookup[as.character(data$Department)]
one = ggplot(data, aes(x = V1, y = V2)) +
geom_point()+
geom_smooth(method = 'lm')+
labs(y='Salary', x='Year of experience', title = "A. Linear model")+
theme_bw(base_size = 20)
two = ggplot(data, aes(x = V1, y = V2)) +
geom_point(aes(color = Department)) +
geom_smooth(aes(color = Department), method = "lm", alpha = 0.3) +
geom_smooth(method = "lm", alpha = 0.3)+
labs(y='Salary', x='Year of experience', title = "B. Linear model acounting for grouping structure")+
theme_bw(base_size = 20)+
theme(legend.position = 'bottom')
(one / two)
#| message: false
#| warning: false
library(lme4)
library(lmerTest)
library(tidyverse)
library(easystats)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
#| label: Lm
#| message: false
#| warning: false
mod_lm = lm(LookingTime ~ Event_trial*Event, data = df)
summary(mod_lm)
head(df)
head(df)
summary(df)
summary(df$Id)
View(df)
data_codebook(df)
data_summary(df)
data_tabulate(df)
data_peek(df)
data_seek(df)
str(df)
skimr::
glimpse(df)
sjPlot
library(sjPlot)
install.packages("sjPlot")
sjPlot::view_df(df)
tabyl(df, Id)
library(janitor)
install.packages('janitor')
sjPlot::tabyl(my_dataframe, Id)
janitor::tabyl(my_dataframe, Id)
janitor::tabyl(df, Id)
int_aligns()
install.packages('summarytools')
summarytools::freq(df)
summarytools::freq(df$Id)
Summary.factor(df$Id)
install.packages('gtsummary')
gtsummary::tbl_summary(df)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 12
#| fig-width: 10
library(easystats)
library(tidyverse)
library(patchwork)
set.seed(1234)
data <- simulate_simpson(n = 10, groups = 5, r = 0.5,difference = 1.5) %>%
mutate(V2= (V2 +abs(min(V2)))*10000) %>%
rename(Department = Group)
# Lookup vector: map old values to new ones
lookup <- c(G_1 = "Informatics", G_2 = "English",
G_3 = "Sociology", G_4 = "Biology", G_5 = "Statistics")
# Replace values using the lookup vector
data$Department <- lookup[as.character(data$Department)]
one = ggplot(data, aes(x = V1, y = V2)) +
geom_point()+
geom_smooth(method = 'lm')+
labs(y='Salary', x='Year of experience', title = "A. Linear model")+
theme_bw(base_size = 20)
two = ggplot(data, aes(x = V1, y = V2)) +
geom_point(aes(color = Department)) +
geom_smooth(aes(color = Department), method = "lm", alpha = 0.3) +
geom_smooth(method = "lm", alpha = 0.3)+
labs(y='Salary', x='Year of experience', title = "B. Linear model acounting for grouping structure")+
theme_bw(base_size = 20)+
theme(legend.position = 'bottom')
(one / two)
#| message: false
#| warning: false
library(lme4)
library(lmerTest)
library(tidyverse)
library(easystats)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
gtsummary::tbl_summary(df)
install.packages('glue')
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 12
#| fig-width: 10
library(easystats)
library(tidyverse)
library(patchwork)
set.seed(1234)
data <- simulate_simpson(n = 10, groups = 5, r = 0.5,difference = 1.5) %>%
mutate(V2= (V2 +abs(min(V2)))*10000) %>%
rename(Department = Group)
# Lookup vector: map old values to new ones
lookup <- c(G_1 = "Informatics", G_2 = "English",
G_3 = "Sociology", G_4 = "Biology", G_5 = "Statistics")
# Replace values using the lookup vector
data$Department <- lookup[as.character(data$Department)]
one = ggplot(data, aes(x = V1, y = V2)) +
geom_point()+
geom_smooth(method = 'lm')+
labs(y='Salary', x='Year of experience', title = "A. Linear model")+
theme_bw(base_size = 20)
two = ggplot(data, aes(x = V1, y = V2)) +
geom_point(aes(color = Department)) +
geom_smooth(aes(color = Department), method = "lm", alpha = 0.3) +
geom_smooth(method = "lm", alpha = 0.3)+
labs(y='Salary', x='Year of experience', title = "B. Linear model acounting for grouping structure")+
theme_bw(base_size = 20)+
theme(legend.position = 'bottom')
(one / two)
#| message: false
#| warning: false
library(lme4)
library(lmerTest)
library(tidyverse)
library(easystats)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
gtsummary::tbl_summary(df)
install.packages('vtable')
vtable::st(df)
vtable::st(df$Id)
vtable::st(df[,'Id'])
summary(df)
str(df)
str(df)
is_pred = estimate_relation(mod_rinterraction, by= c('Event_trial','Event', 'Id'), include_random =T)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 12
#| fig-width: 10
library(easystats)
library(tidyverse)
library(patchwork)
set.seed(1234)
data <- simulate_simpson(n = 10, groups = 5, r = 0.5,difference = 1.5) %>%
mutate(V2= (V2 +abs(min(V2)))*10000) %>%
rename(Department = Group)
# Lookup vector: map old values to new ones
lookup <- c(G_1 = "Informatics", G_2 = "English",
G_3 = "Sociology", G_4 = "Biology", G_5 = "Statistics")
# Replace values using the lookup vector
data$Department <- lookup[as.character(data$Department)]
one = ggplot(data, aes(x = V1, y = V2)) +
geom_point()+
geom_smooth(method = 'lm')+
labs(y='Salary', x='Year of experience', title = "A. Linear model")+
theme_bw(base_size = 20)
two = ggplot(data, aes(x = V1, y = V2)) +
geom_point(aes(color = Department)) +
geom_smooth(aes(color = Department), method = "lm", alpha = 0.3) +
geom_smooth(method = "lm", alpha = 0.3)+
labs(y='Salary', x='Year of experience', title = "B. Linear model acounting for grouping structure")+
theme_bw(base_size = 20)+
theme(legend.position = 'bottom')
(one / two)
#| message: false
#| warning: false
library(lme4)
library(lmerTest)
library(tidyverse)
library(easystats)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
#| label: Lm
#| message: false
#| warning: false
mod_lm = lm(LookingTime ~ Event_trial*Event, data = df)
summary(mod_lm)
str(df)
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df)
summary(mod_rintercept)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, by= c('Event_trial','Event', 'Id'), include_random =T)
ggplot(i_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, by= c('Event_trial','Event'), include_random =F)
ggplot(i_pred, aes(x= Event_trial, y= Predicted))+
geom_point(data = df, aes(y= LookingTime, color= Id, shape = Event), position= position_jitter(width=0.2))+
geom_line(aes(group= Event),color= 'blue', lwd=1.4)+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, group= Event),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_bw(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
mod_rslope =lmer(LookingTime ~ Event_trial * Event+ (0 + Event_trial | Id ), data= df)
summary(mod_rslope)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
s_pred = estimate_relation(mod_rslope, by= c('Event_trial','Event', 'Id'), include_random =T)
ggplot(s_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
mod_rinterraction = lmer(LookingTime ~ Event_trial * Event+ (1 + Event_trial | Id ), data= df)
summary(mod_rinterraction)
is_pred = estimate_relation(mod_rinterraction, by= c('Event_trial','Event', 'Id'), include_random =T)
View(is_pred)
View(df)
get_predicted(mod_rinterraction)
get_datagrid(mod_rinterraction, by= c('Event_trial','Event', 'Id'), include_random =T)
get_datagrid(mod_rinterraction, by= c('Event_trial','Event'), include_random =T)
easystats::install_latest()
visualisation_recipe(mod_rinterraction, by= c('Event_trial','Event'), include_random =T)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 12
#| fig-width: 10
library(easystats)
library(tidyverse)
library(patchwork)
set.seed(1234)
data <- simulate_simpson(n = 10, groups = 5, r = 0.5,difference = 1.5) %>%
mutate(V2= (V2 +abs(min(V2)))*10000) %>%
rename(Department = Group)
# Lookup vector: map old values to new ones
lookup <- c(G_1 = "Informatics", G_2 = "English",
G_3 = "Sociology", G_4 = "Biology", G_5 = "Statistics")
# Replace values using the lookup vector
data$Department <- lookup[as.character(data$Department)]
one = ggplot(data, aes(x = V1, y = V2)) +
geom_point()+
geom_smooth(method = 'lm')+
labs(y='Salary', x='Year of experience', title = "A. Linear model")+
theme_bw(base_size = 20)
two = ggplot(data, aes(x = V1, y = V2)) +
geom_point(aes(color = Department)) +
geom_smooth(aes(color = Department), method = "lm", alpha = 0.3) +
geom_smooth(method = "lm", alpha = 0.3)+
labs(y='Salary', x='Year of experience', title = "B. Linear model acounting for grouping structure")+
theme_bw(base_size = 20)+
theme(legend.position = 'bottom')
(one / two)
#| message: false
#| warning: false
library(lme4)
library(lmerTest)
library(tidyverse)
library(easystats)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
#| label: Lm
#| message: false
#| warning: false
mod_lm = lm(LookingTime ~ Event_trial*Event, data = df)
summary(mod_lm)
str(df)
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df)
summary(mod_rintercept)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, by= c('Event_trial','Event', 'Id'), include_random =T)
ggplot(i_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, by= c('Event_trial','Event'), include_random =F)
ggplot(i_pred, aes(x= Event_trial, y= Predicted))+
geom_point(data = df, aes(y= LookingTime, color= Id, shape = Event), position= position_jitter(width=0.2))+
geom_line(aes(group= Event),color= 'blue', lwd=1.4)+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, group= Event),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_bw(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
mod_rslope =lmer(LookingTime ~ Event_trial * Event+ (0 + Event_trial | Id ), data= df)
summary(mod_rslope)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
s_pred = estimate_relation(mod_rslope, by= c('Event_trial','Event', 'Id'), include_random =T)
ggplot(s_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
mod_rinterraction = lmer(LookingTime ~ Event_trial * Event+ (1 + Event_trial | Id ), data= df)
summary(mod_rinterraction)
estimate_relation(mod_rinterraction)
estimate_relation(mod_rinterraction, include_random =T)
View(df)
get_predicted(mod_rinterraction)
get_predicted(mod_rinterraction, ci=T)
as.data.frame(get_predicted(mod_rinterraction, ci=T))
get_datagrid(mod_rinterraction)
get_datagrid(mod_rinterraction, include_random = T)
A =get_datagrid(mod_rinterraction, include_random = T)
5*20
5*20*2
unique(A$Id)
easystats::install_suggested()
remove.packages(modelbased)
remove.packages('modelbased')
remove.packages('insight')
remove.packages('see')
remove.packages('parameters')
remove.packages('correlation')
remove.packages('bayestestr')
remove.packages('bayestestr')
remove.packages('bayestestR')
remove.packages('datawizard')
remove.packages('effectsize')
remove.packages('performance')
remove.packages('report')
remove.packages('easystats')
remove.packages('insight')
install.packages('easystats')
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 12
#| fig-width: 10
library(easystats)
library(tidyverse)
library(patchwork)
set.seed(1234)
data <- simulate_simpson(n = 10, groups = 5, r = 0.5,difference = 1.5) %>%
mutate(V2= (V2 +abs(min(V2)))*10000) %>%
rename(Department = Group)
# Lookup vector: map old values to new ones
lookup <- c(G_1 = "Informatics", G_2 = "English",
G_3 = "Sociology", G_4 = "Biology", G_5 = "Statistics")
# Replace values using the lookup vector
data$Department <- lookup[as.character(data$Department)]
one = ggplot(data, aes(x = V1, y = V2)) +
geom_point()+
geom_smooth(method = 'lm')+
labs(y='Salary', x='Year of experience', title = "A. Linear model")+
theme_bw(base_size = 20)
two = ggplot(data, aes(x = V1, y = V2)) +
geom_point(aes(color = Department)) +
geom_smooth(aes(color = Department), method = "lm", alpha = 0.3) +
geom_smooth(method = "lm", alpha = 0.3)+
labs(y='Salary', x='Year of experience', title = "B. Linear model acounting for grouping structure")+
theme_bw(base_size = 20)+
theme(legend.position = 'bottom')
(one / two)
#| message: false
#| warning: false
library(lme4)
library(lmerTest)
library(tidyverse)
library(easystats)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
#| label: Lm
#| message: false
#| warning: false
mod_lm = lm(LookingTime ~ Event_trial*Event, data = df)
summary(mod_lm)
str(df)
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df)
summary(mod_rintercept)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, by= c('Event_trial','Event', 'Id'), include_random =T)
ggplot(i_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, by= c('Event_trial','Event'), include_random =F)
ggplot(i_pred, aes(x= Event_trial, y= Predicted))+
geom_point(data = df, aes(y= LookingTime, color= Id, shape = Event), position= position_jitter(width=0.2))+
geom_line(aes(group= Event),color= 'blue', lwd=1.4)+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, group= Event),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_bw(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
mod_rslope =lmer(LookingTime ~ Event_trial * Event+ (0 + Event_trial | Id ), data= df)
summary(mod_rslope)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
s_pred = estimate_relation(mod_rslope, by= c('Event_trial','Event', 'Id'), include_random =T)
ggplot(s_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
mod_rinterraction = lmer(LookingTime ~ Event_trial * Event+ (1 + Event_trial | Id ), data= df)
summary(mod_rinterraction)
get_datagrid(mod_rinterraction, include_random =T)
install_latest()
df$Id = Pastes('Id', 1:nrow(df))
df$Id = paste('Id', 1:nrow(df))
mod_rinterraction = lmer(LookingTime ~ Event_trial * Event+ (1 + Event_trial | Id ), data= df)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
df$Id = paste('Id', (df$Id), sep = '_')
mod_rinterraction = lmer(LookingTime ~ Event_trial * Event+ (1 + Event_trial | Id ), data= df)
summary(mod_rinterraction)
get_datagrid(mod_rinterraction, include_random =T)
A = get_datagrid(mod_rinterraction, include_random =T)
View(A)
unique(df$Id)
View(A)
unique(A$Id)
visualisation_recipe(mod_rinterraction, by= c('Event_trial','Event'), include_random =F)
mod_rinterraction
A = get_datagrid(mod_rinterraction, include_random =F)
data.frame(Id = unique(df$Id))
A = get_datagrid(mod_rinterraction, include_random =F)
merge(A, data.frame(Id = unique(df$Id), by=NULL)
)
merge(A, data.frame(Id = unique(df$Id), by=NULL))
A = get_datagrid(mod_rinterraction, include_random =F)
merge(A, data.frame(Id = unique(df$Id), by=NULL))
merge(A, data.frame(Id = unique(df$Id)), by=NULL)
data.frame(Id = unique(df$Id)
)
A
A = get_datagrid(mod_rinterraction, include_random =F)
A
A = get_datagrid(mod_rinterraction)
A
A = get_datagrid(mod_rinterraction) %>%
merge( data.frame(Id = unique(df$Id)), by=NULL) %>%
rename(Id = Id.y)
A
get_predicted(mod_rinterraction, newdata = A)
get_predicted(A)
A = visualisation_recipe(mod_rinterraction) %>%
merge( data.frame(Id = unique(df$Id)), by=NULL) %>%
rename(Id = Id.y)
A = get_datagrid(mod_rinterraction) %>%
merge( data.frame(Id = unique(df$Id)), by=NULL) %>%
rename(Id = Id.y)
get_predicted(mod_rinterraction, newdata = A)
View(A)
