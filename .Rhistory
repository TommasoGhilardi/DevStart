library(easystats)  # Easy statistical modeling
data = read.csv("..\\..\\resources\\Pupillometry\\Processed\\Processed_PupilData.csv")
# Make sure Event and Subject are factors
data$Event = as.factor(data$Event)
data$Subject = as.factor(data$Subject)
head(data)
#| message: false
#| warning: false
averaged_data = data %>%
group_by(Subject, Event, TrialN) %>%
summarise(mean_pupil = mean(mean_pupil, na.rm = TRUE))
head(averaged_data)
#| message: false
#| warning: false
library(lmerTest)   # Mixed-effect models library
# The actual model
model_avg = lmer(mean_pupil ~ Event + (1|Subject), data = averaged_data)
summary(model_avg) # summary of the model
#| message: false
#| warning: false
#| code-fold: true
#| fig-align: center
#| fig-height: 20
#| fig-width: 30
# Create a data grid for Event and time
datagrid = get_datagrid(model_avg, by = c('Event'))
# Compute model-based expected values for each level of Event
pred = estimate_expectation(datagrid)
# 'pred' now contains predicted values and confidence intervals for each event condition.
# We can visualize these predictions and overlay them on the observed data.
ggplot() +
# Observed data (jittered points to show distribution)
geom_jitter(data = averaged_data, aes(x=Event, y=mean_pupil, color=Event), width=0.1, alpha=0.5, size = 5) +
# Model-based predictions: points for Predicted values
geom_point(data=pred, aes(x=Event, y=Predicted, fill=Event),
shape=21, size=10) +
# Error bars for the confidence intervals
geom_errorbar(data=pred, aes(x=Event, ymin=Predicted - SE, ymax=Predicted + SE, color=Event),
width=0.2, lwd=1.5) +
theme_bw(base_size = 45)+
theme(legend.position = 'none') +
labs(title="Predicted Means vs. Observed Data",
x="Condition",
y="Baseline-Corrected Pupil Size")
#| message: false
#| warning: false
linear_model = lmer(mean_pupil ~ Event * time + (1|Subject), data = data)
#| message: false
#| warning: false
#| code-fold: true
#| fig-align: center
#| fig-height: 20
#| fig-width: 30
# Let's first compute average pupil size at each time point by condition
data_avg_time = data %>%
group_by(Event, time) %>%
summarise(mean_pupil = mean(mean_pupil, na.rm=TRUE))
# Now let's plot these averages over time
ggplot(data_avg_time, aes(x=time, y=mean_pupil, color=Event)) +
geom_line(lwd=1.5) +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(x = "time (ms)",
y = "Baseline-Corrected Pupil Size")
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 20
#| fig-width: 30
# Create a data grid for Event and time
datagrid = get_datagrid(linear_model, by = c('Event','time'))
# Estimate expectation and uncertainty (Predicted and SE)
Est = estimate_expectation(linear_model, datagrid)
# Plot predictions with confidence intervals and the observed data
ggplot() +
# Real data line
geom_line(data = data_avg_time, aes(x=time, y=mean_pupil, color=Event), lwd=1.5) +
# Predicted ribbons
geom_ribbon(data = Est, aes(x=time, ymin = Predicted - SE, ymax = Predicted + SE,
fill = Event), alpha = 0.2) +
# Predicted lines
geom_line(data = Est, aes(x=time, y=Predicted, color=Event), lwd=1.8,linetype = "dashed") +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(title = "Linear Model Predictions vs. Data",
x = "time (ms)",
y = "Baseline-corrected Pupil Size")
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 15
#| fig-width: 30
library(patchwork)
# Parameters
amp <- 1; freq <- 1; phase <- 0; rate <- 100; dur <- 2
time <- seq(0, dur, by = 1 / rate)
# Sinusoidal wave with noise
wave <- amp * sin(2 * pi * freq * time + phase) + rnorm(length(time), mean = 0, sd = 0.2)
# Plot
one = ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
theme_bw(base_size = 45)+
labs(y='Data')
two = ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
geom_smooth(aes(y=wave, x= time), method = 'lm', color='black', lwd=1.5)+
theme_bw(base_size = 45)+
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank()
)
tree= ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
geom_smooth(aes(y=wave, x= time), method = 'gam', color='black', lwd=1.5)+
theme_bw(base_size = 45)+
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank()
)
one + two + tree
#| message: false
#| warning: false
library("mgcv")
# Additive model
additive_model = bam(mean_pupil ~ Event
+ s(time, by=Event, k=20)
+ s(time, Subject, bs='fs', m=1),
data=data)
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 20
#| fig-width: 30
# Data grid
datagrid = get_datagrid(additive_model, length = 100, include_random = T)
# Estimate expectation and uncertainty (Predicted and SE)
Est = estimate_expectation(additive_model, datagrid, exclude=c("s(time,Subject)"))
# Plot predictions with confidence intervals and the observed data
ggplot() +
# Real data line
geom_line(data = data_avg_time, aes(x=time, y=mean_pupil, color=Event), size=1.5) +
# Predicted ribbons
geom_ribbon(data = Est, aes(x=time, ymin = CI_low, ymax = CI_high,
fill = Event), alpha = 0.2) +
# Predicted lines
geom_line(data = Est, aes(x=time, y=Predicted, color=Event), size=1.8, linetype = "dashed") +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(title = "Additive model Predictions vs. Data",
x = "time (ms)",
y = "Baseline-corrected Pupil Size")
#| message: false
#| warning: false
summary(additive_model)
library(gratia)
library(gratia)
check_model(additive_model, residual_type = "normal")
draw(additive_model)
appraise(additive_model)
residuals(additive_model)
A=residuals(additive_model)
residuals <- resid(additive_model)
# Plot autocorrelation function
acf(residuals)
#| message: false
#| warning: false
library(tidyverse)  # Data manipulation and visualization
library(easystats)  # Easy statistical modeling
data = read.csv("..\\..\\resources\\Pupillometry\\Processed\\Processed_PupilData.csv")
# Make sure Event and Subject are factors
data$Event = as.factor(data$Event)
data$Subject = as.factor(data$Subject)
head(data)
#| message: false
#| warning: false
averaged_data = data %>%
group_by(Subject, Event, TrialN) %>%
summarise(mean_pupil = mean(mean_pupil, na.rm = TRUE))
head(averaged_data)
#| message: false
#| warning: false
library(lmerTest)   # Mixed-effect models library
# The actual model
model_avg = lmer(mean_pupil ~ Event + (1|Subject), data = averaged_data)
summary(model_avg) # summary of the model
#| message: false
#| warning: false
#| code-fold: true
#| fig-align: center
#| fig-height: 20
#| fig-width: 30
# Create a data grid for Event and time
datagrid = get_datagrid(model_avg, by = c('Event'))
# Compute model-based expected values for each level of Event
pred = estimate_expectation(datagrid)
# 'pred' now contains predicted values and confidence intervals for each event condition.
# We can visualize these predictions and overlay them on the observed data.
ggplot() +
# Observed data (jittered points to show distribution)
geom_jitter(data = averaged_data, aes(x=Event, y=mean_pupil, color=Event), width=0.1, alpha=0.5, size = 5) +
# Model-based predictions: points for Predicted values
geom_point(data=pred, aes(x=Event, y=Predicted, fill=Event),
shape=21, size=10) +
# Error bars for the confidence intervals
geom_errorbar(data=pred, aes(x=Event, ymin=Predicted - SE, ymax=Predicted + SE, color=Event),
width=0.2, lwd=1.5) +
theme_bw(base_size = 45)+
theme(legend.position = 'none') +
labs(title="Predicted Means vs. Observed Data",
x="Condition",
y="Baseline-Corrected Pupil Size")
#| message: false
#| warning: false
linear_model = lmer(mean_pupil ~ Event * time + (1|Subject), data = data)
#| message: false
#| warning: false
#| code-fold: true
#| fig-align: center
#| fig-height: 20
#| fig-width: 30
# Let's first compute average pupil size at each time point by condition
data_avg_time = data %>%
group_by(Event, time) %>%
summarise(mean_pupil = mean(mean_pupil, na.rm=TRUE))
# Now let's plot these averages over time
ggplot(data_avg_time, aes(x=time, y=mean_pupil, color=Event)) +
geom_line(lwd=1.5) +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(x = "time (ms)",
y = "Baseline-Corrected Pupil Size")
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 20
#| fig-width: 30
# Create a data grid for Event and time
datagrid = get_datagrid(linear_model, by = c('Event','time'))
# Estimate expectation and uncertainty (Predicted and SE)
Est = estimate_expectation(linear_model, datagrid)
# Plot predictions with confidence intervals and the observed data
ggplot() +
# Real data line
geom_line(data = data_avg_time, aes(x=time, y=mean_pupil, color=Event), lwd=1.5) +
# Predicted ribbons
geom_ribbon(data = Est, aes(x=time, ymin = Predicted - SE, ymax = Predicted + SE,
fill = Event), alpha = 0.2) +
# Predicted lines
geom_line(data = Est, aes(x=time, y=Predicted, color=Event), lwd=1.8,linetype = "dashed") +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(title = "Linear Model Predictions vs. Data",
x = "time (ms)",
y = "Baseline-corrected Pupil Size")
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 15
#| fig-width: 30
library(patchwork)
# Parameters
amp <- 1; freq <- 1; phase <- 0; rate <- 100; dur <- 2
time <- seq(0, dur, by = 1 / rate)
# Sinusoidal wave with noise
wave <- amp * sin(2 * pi * freq * time + phase) + rnorm(length(time), mean = 0, sd = 0.2)
# Plot
one = ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
theme_bw(base_size = 45)+
labs(y='Data')
two = ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
geom_smooth(aes(y=wave, x= time), method = 'lm', color='black', lwd=1.5)+
theme_bw(base_size = 45)+
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank()
)
tree= ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
geom_smooth(aes(y=wave, x= time), method = 'gam', color='black', lwd=1.5)+
theme_bw(base_size = 45)+
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank()
)
one + two + tree
#| message: false
#| warning: false
library("mgcv")
# Additive model
additive_model = bam(mean_pupil ~ Event
+ s(time, by=Event, k=20)
+ s(time, Subject, bs='fs', m=1),
data=data)
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 20
#| fig-width: 30
# Data grid
datagrid = get_datagrid(additive_model, length = 100, include_random = T)
# Estimate expectation and uncertainty (Predicted and SE)
Est = estimate_expectation(additive_model, datagrid, exclude=c("s(time,Subject)"))
# Plot predictions with confidence intervals and the observed data
ggplot() +
# Real data line
geom_line(data = data_avg_time, aes(x=time, y=mean_pupil, color=Event), size=1.5) +
# Predicted ribbons
geom_ribbon(data = Est, aes(x=time, ymin = CI_low, ymax = CI_high,
fill = Event), alpha = 0.2) +
# Predicted lines
geom_line(data = Est, aes(x=time, y=Predicted, color=Event), size=1.8, linetype = "dashed") +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(title = "Additive model Predictions vs. Data",
x = "time (ms)",
y = "Baseline-corrected Pupil Size")
#| message: false
#| warning: false
summary(additive_model)
check_model(additive_model)
check_model(additive_model, residual_type = "normal")
performance::check_model(additive_model, residual_type = "normal")
library(tidyverse)
performance::check_model(additive_model, residual_type = "normal")
#| message: false
#| warning: false
library(tidyverse)  # Data manipulation and visualization
library(easystats)  # Easy statistical modeling
data = read.csv("..\\..\\resources\\Pupillometry\\Processed\\Processed_PupilData.csv")
# Make sure Event and Subject are factors
data$Event = as.factor(data$Event)
data$Subject = as.factor(data$Subject)
head(data)
#| message: false
#| warning: false
averaged_data = data %>%
group_by(Subject, Event, TrialN) %>%
summarise(mean_pupil = mean(mean_pupil, na.rm = TRUE))
head(averaged_data)
#| message: false
#| warning: false
library(lmerTest)   # Mixed-effect models library
# The actual model
model_avg = lmer(mean_pupil ~ Event + (1|Subject), data = averaged_data)
summary(model_avg) # summary of the model
#| message: false
#| warning: false
#| code-fold: true
#| fig-align: center
#| fig-height: 20
#| fig-width: 30
# Create a data grid for Event and time
datagrid = get_datagrid(model_avg, by = c('Event'))
# Compute model-based expected values for each level of Event
pred = estimate_expectation(datagrid)
# 'pred' now contains predicted values and confidence intervals for each event condition.
# We can visualize these predictions and overlay them on the observed data.
ggplot() +
# Observed data (jittered points to show distribution)
geom_jitter(data = averaged_data, aes(x=Event, y=mean_pupil, color=Event), width=0.1, alpha=0.5, size = 5) +
# Model-based predictions: points for Predicted values
geom_point(data=pred, aes(x=Event, y=Predicted, fill=Event),
shape=21, size=10) +
# Error bars for the confidence intervals
geom_errorbar(data=pred, aes(x=Event, ymin=Predicted - SE, ymax=Predicted + SE, color=Event),
width=0.2, lwd=1.5) +
theme_bw(base_size = 45)+
theme(legend.position = 'none') +
labs(title="Predicted Means vs. Observed Data",
x="Condition",
y="Baseline-Corrected Pupil Size")
#| message: false
#| warning: false
linear_model = lmer(mean_pupil ~ Event * time + (1|Subject), data = data)
#| message: false
#| warning: false
#| code-fold: true
#| fig-align: center
#| fig-height: 20
#| fig-width: 30
# Let's first compute average pupil size at each time point by condition
data_avg_time = data %>%
group_by(Event, time) %>%
summarise(mean_pupil = mean(mean_pupil, na.rm=TRUE))
# Now let's plot these averages over time
ggplot(data_avg_time, aes(x=time, y=mean_pupil, color=Event)) +
geom_line(lwd=1.5) +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(x = "time (ms)",
y = "Baseline-Corrected Pupil Size")
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 20
#| fig-width: 30
# Create a data grid for Event and time
datagrid = get_datagrid(linear_model, by = c('Event','time'))
# Estimate expectation and uncertainty (Predicted and SE)
Est = estimate_expectation(linear_model, datagrid)
# Plot predictions with confidence intervals and the observed data
ggplot() +
# Real data line
geom_line(data = data_avg_time, aes(x=time, y=mean_pupil, color=Event), lwd=1.5) +
# Predicted ribbons
geom_ribbon(data = Est, aes(x=time, ymin = Predicted - SE, ymax = Predicted + SE,
fill = Event), alpha = 0.2) +
# Predicted lines
geom_line(data = Est, aes(x=time, y=Predicted, color=Event), lwd=1.8,linetype = "dashed") +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(title = "Linear Model Predictions vs. Data",
x = "time (ms)",
y = "Baseline-corrected Pupil Size")
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 15
#| fig-width: 30
library(patchwork)
# Parameters
amp <- 1; freq <- 1; phase <- 0; rate <- 100; dur <- 2
time <- seq(0, dur, by = 1 / rate)
# Sinusoidal wave with noise
wave <- amp * sin(2 * pi * freq * time + phase) + rnorm(length(time), mean = 0, sd = 0.2)
# Plot
one = ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
theme_bw(base_size = 45)+
labs(y='Data')
two = ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
geom_smooth(aes(y=wave, x= time), method = 'lm', color='black', lwd=1.5)+
theme_bw(base_size = 45)+
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank()
)
tree= ggplot()+
geom_point(aes(y=wave, x= time),size=3)+
geom_smooth(aes(y=wave, x= time), method = 'gam', color='black', lwd=1.5)+
theme_bw(base_size = 45)+
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank()
)
one + two + tree
#| message: false
#| warning: false
library("mgcv")
# Additive model
additive_model = bam(mean_pupil ~ Event
+ s(time, by=Event, k=20)
+ s(time, Subject, bs='fs', m=1),
data=data)
#| message: false
#| warning: false
#| code-fold: true
#| fig-height: 20
#| fig-width: 30
# Data grid
datagrid = get_datagrid(additive_model, length = 100, include_random = T)
# Estimate expectation and uncertainty (Predicted and SE)
Est = estimate_expectation(additive_model, datagrid, exclude=c("s(time,Subject)"))
# Plot predictions with confidence intervals and the observed data
ggplot() +
# Real data line
geom_line(data = data_avg_time, aes(x=time, y=mean_pupil, color=Event), size=1.5) +
# Predicted ribbons
geom_ribbon(data = Est, aes(x=time, ymin = CI_low, ymax = CI_high,
fill = Event), alpha = 0.2) +
# Predicted lines
geom_line(data = Est, aes(x=time, y=Predicted, color=Event), size=1.8, linetype = "dashed") +
theme_bw(base_size = 45)+
theme(legend.position = 'bottom',
legend.title = element_blank()) +
guides(color = guide_legend(override.aes = list(lwd = 20))) +
labs(title = "Additive model Predictions vs. Data",
x = "time (ms)",
y = "Baseline-corrected Pupil Size")
#| message: false
#| warning: false
summary(additive_model)
check_model(additive_model)
check_distribution(additive_model)
check_distribution(additive_model)
install.packages("mgcViz")
mgcViz::check(additive_model)
library(mgcViz)
check(additive_model)
mgcViz::check(additive_model)
gam.check( check(additive_model)
gam.check(additive_model)
check(getViz(additive_model))
