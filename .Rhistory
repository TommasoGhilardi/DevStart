scale_x_continuous(breaks = c(0, 1, 2), labels = c('','brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
coord_cartesian(xlim = c(-1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2,3), labels = c('','brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
coord_cartesian(xlim = c(-1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
library(ggplot2)
model_p = parameters(mod)
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
# To create estimates
time_values <- seq(0, 10, by = 0.5)
ggplot()+
# Cartesian lines
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0)+
# Intercept
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred') +
annotate("text", x = -0.5, y=intercept_brush*1.15, label='(Intercept)')+
# Plot addition information
coord_cartesian(xlim = c(-1,5), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
intercept_hammer <- model_p[3,2] + intercept_brush
intercept_hammer_se <- model_p[3,3]
intercept_spoon <- model_p[4,2]+ intercept_brush
intercept_spoon_se <- model_p[4,3]
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
library(ggplot2)
model_p = parameters(mod)
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
# To create estimates
time_values <- seq(0, 10, by = 0.5)
ggplot()+
# Cartesian lines
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0)+
# Intercept
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred') +
annotate("text", x = -0.5, y=intercept_brush*1.15, label='(Intercept)')+
# Plot addition information
coord_cartesian(xlim = c(-1,5), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
library(ggplot2)
model_p = parameters(mod)
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
# To create estimates
time_values <- seq(0, 10, by = 0.5)
ggplot()+
# Cartesian lines
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0)+
# Intercept
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred') +
annotate("text", x = -0.5, y=intercept_brush*1.15, label='(Intercept)')+
# Plot addition information
coord_cartesian(xlim = c(-1,5), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)
library(ggplot2)
model_p = parameters(mod)
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
# To create estimates
time_values <- seq(0, 10, by = 0.5)
ggplot()+
# Cartesian lines
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0)+
# Intercept
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred') +
annotate("text", x = -0.5, y=intercept_brush*1.15, label='(Intercept)')+
# Plot addition information
coord_cartesian(xlim = c(-1,5), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)
ggplot()+
# Cartesian lines
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0)+
# Intercept
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred') +
annotate("text", x = -0.5, y=intercept_brush*1.15, label='(Intercept)')+
# Plot addition information
coord_cartesian(xlim = c(-1,5), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)
df = read.csv("..\\..\\resources\\Stats\\LM_SimulatedData.csv")
head(df)
mod = lm(performance ~ time*tool, data = df)
summary(mod)
#| fig-height: 8
#| fig-width: 12
#| fig-dpi: 300
#| warning: false
library(easystats)
check_model(mod)
#| echo: false
#| warning: false
# Load necessary packages
library(gt)
library(gtExtras)
library(glue)
# Create a dataframe that resembles the content of the image
data <- data.frame(
Column1 = c(
glue("**Posterior predictive checks**<br>Compare simulated data from the fitted model to actual data. This reveals systematic discrepancies, helping assess if the model captures key data features and if the chosen distribution family is appropriate."),
glue("**Homoscedasticity/Homogeneity of variance**<br>Checks for homoscedasticity (constant variance). Residuals should spread evenly around a horizontal line across all predictor values. Uneven spread suggests variance inconsistencies, potentially requiring model adjustments."),
glue("**Multi-Collinearity**<br>Evaluates predictor independence. High collinearity indicates redundant predictors or possible unobserved variables influencing multiple predictors, which can affect interpretation and model stability.")
),
Column2 = c(
glue("**Linearity**<br>Checks if predictors have a linear relationship with the outcome. A straight, horizontal line suggests the model specification is appropriate. Curved or sloped lines indicate potential non-linear relationships, signaling the need for model adjustments."),
glue("**Outliers**<br>Identifies influential observations using Cook's distance. Points beyond the dashed lines are outliers that may excessively impact model estimates, warranting further investigation or potential removal."),
glue("**Normality of residuals**<br>Uses Q-Q plots to assess if residuals follow a normal distribution. Points should align with the reference line; deviations suggest the model poorly predicts certain outcome ranges, potentially violating normality assumptions.")
)
)
# Create the gt table, apply the custom theme, and add additional styling
table <- gt(data) %>%
fmt_markdown(columns = everything()) %>%
gt_theme_nytimes() %>%
# Add a title to the table and ensure it is centered
tab_header(
title = md("**Model Diagnostic Checks**")
) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_title(groups = "title")
) %>%
# Hide the headers by setting empty labels
cols_label(
Column1 = "",
Column2 = ""
) %>%
# Add borders around all cells
tab_style(
style = cell_borders(sides = "all", color = "black", weight = px(1)),
locations = cells_body()
) %>%
# Add borders around the entire table
tab_options(
table.border.top.style = "solid",
table.border.top.color = "black",
table.border.top.width = px(1),
table.border.bottom.style = "solid",
table.border.bottom.color = "black",
table.border.bottom.width = px(1),
table.border.left.style = "solid",
table.border.left.color = "black",
table.border.left.width = px(1),
table.border.right.style = "solid",
table.border.right.color = "black",
table.border.right.width = px(1),
column_labels.hidden = TRUE
)
# Print the table
table
check_normality(mod)
check_homogeneity(mod)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
library(ggplot2)
model_p = parameters(mod)
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
# To create estimates
time_values <- seq(0, 10, by = 0.5)
ggplot()+
# Cartesian lines
geom_vline(xintercept = 0)+
geom_hline(yintercept = 0)+
# Intercept
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred') +
annotate("text", x = -0.5, y=intercept_brush*1.15, label='(Intercept)')+
# Plot addition information
coord_cartesian(xlim = c(-1,5), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
intercept_hammer <- model_p[3,2] + intercept_brush
intercept_hammer_se <- model_p[3,3]
intercept_spoon <- model_p[4,2]+ intercept_brush
intercept_spoon_se <- model_p[4,3]
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
intercept_hammer <- model_p[3,2] + intercept_brush
intercept_hammer_se <- model_p[3,3]
intercept_spoon <- model_p[4,2]+ intercept_brush
intercept_spoon_se <- model_p[4,3]
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4)
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 4))
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen')
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen')
(
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
# coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
ggplot() +
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
# coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon'))
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
# coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools')
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
# coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 4)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
2
ggplot() +
# Intercept (brush)
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Hammer
annotate("point", x = 1, y = intercept_hammer, size = pi * intercept_hammer_se^2, alpha = 0.3, color = 'darkblue') +
annotate("point", x = 1, y = intercept_hammer, color = 'darkblue', size = 4) +
# Spoon
annotate("point", x = 2, y = intercept_spoon, size = pi * intercept_spoon_se^2, alpha = 0.3, color = 'darkgreen') +
annotate("point", x = 2, y = intercept_spoon, color = 'darkgreen', size = 4) +
# Set the limits for x and y axes
coord_cartesian(xlim = c(-0.1, 2.2), ylim = c(0, 7)) +
# Customize x-axis breaks
scale_x_continuous(breaks = c(0, 1, 2), labels = c('brush','hammer','spoon')) +
# Labels and theme
labs(y = 'Performance', x = 'Tools') +
theme_bw(base_size = 20)
#| fig-height: 6
#| fig-width: 8
#| fig-dpi: 300
#| warning: false
# Define intercept and slope for the brush
intercept_brush <- model_p[1,2]
intercept_brush_se <- model_p[1,3]
slope_brush <- model_p[2,2]
slope_brush_se <- model_p[2,3]
# To create estimates
time_values <- seq(-1, 4, by = 0.25)
# Create a data frame
df_brush <- data.frame(time = time_values,
est_performance = intercept_brush + slope_brush * time_values)
# Function to create an arc between two angles with a custom center
generate_circle_piece <- function(center = c(0, 0), radius = 1, start_angle = 0, end_angle = 90) {
# Convert angles to radians
start_rad <- start_angle * pi / 180
end_rad <- end_angle * pi / 180
# Generate points for the piece of the circle
theta <- seq(start_rad, end_rad, length.out = 100)
x <- center[1] + radius * cos(theta)
y <- center[2] + radius * sin(theta)
# Create a data frame for the circle points
circle_data <- data.frame(x = x, y = y)
return(circle_data)
}
# Create data for the arc with the angle calculated from the slope, using the new center
arc_data <- generate_circle_piece(center = c(0, intercept_brush), radius = 0.5, start_angle = 0, end_angle =  atan(slope_brush) * (180 / pi))
ggplot(df_brush, aes(x = time, y = est_performance))+
# Cartesian lines
geom_vline(xintercept = 0)+
# geom_hline(yintercept = 0)+
#
# Time
geom_path(data = arc_data, aes(x = x, y = y), color = 'green', size = 1.5) +
geom_hline(yintercept = intercept_brush, linetype = 'dashed', color = 'darkgray')+
geom_line(color = "darkred", size = 1) +
# Intercept
annotate("point", x = 0, y = intercept_brush, size = pi * intercept_brush_se^2, alpha = 0.3, color = 'darkred') +
annotate("point", x = 0, y = intercept_brush, color = 'darkred', size = 4) +
# Text
annotate("text", x = -0.5, y=2.825, label='(Intercept)')+
annotate("text", x = 0.8, y=2.82, label='time')+
# Plot addition information
# coord_cartesian(xlim = c(-1,4), ylim = c(-1,5))+
labs(y = 'Performance', x = 'Time')+
theme_bw(base_size = 20)
setwd("C:/Users/tomma/OneDrive - Birkbeck, University of London/TomassoGhilardi/PersonalProj/Website/DevStart/CONTENT/Workshops")
