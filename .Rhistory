labs(y='Salary', x='Year of experience', title = "A. Linear model")+
theme_bw(base_size = 20)
two = ggplot(data, aes(x = V1, y = V2)) +
geom_point(aes(color = Department)) +
geom_smooth(aes(color = Department), method = "lm", alpha = 0.3) +
geom_smooth(method = "lm", alpha = 0.3)+
labs(y='Salary', x='Year of experience', title = "B. Linear model acounting for grouping structure")+
theme_bw(base_size = 20)+
theme(legend.position = 'bottom')
(one / two)
#| message: false
#| warning: false
library(lme4)
library(lmerTest)
library(tidyverse)
library(easystats)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
#| label: Lm
#| message: false
#| warning: false
mod_lm = lm(LookingTime ~ Event_trial*Event, data = df)
summary(mod_lm)
str(df)
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df)
summary(mod_rintercept)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, by= c('Event_trial','Event', 'Id'), include_random =T)
ggplot(i_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
get_datagrid(mod_rintercept, include_random = T)
Grid = get_datagrid(mod_rintercept, by= c('Id'))
Grid = get_datagrid(mod_rintercept, by= c('Id', 'Event'))
Grid = get_datagrid(mod_rintercept, by= c('Id', 'Event', 'Event_trial'))
Grid = get_datagrid(mod_rintercept, include_random = T)
length(Grid$Id)
Grid = get_datagrid(mod_rintercept, by= c('Id', 'Event', 'Event_trial'))
Grid = get_datagrid(mod_rintercept, include_random = T)
length(unique(Grid$Id))
Grid = get_datagrid(mod_rintercept, by= c('Id', 'Event', 'Event_trial'))
ggplot(i_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
Grid = get_datagrid(mod_rintercept, include_random = T)
length(unique(Grid$Id))
Grid = get_datagrid(mod_rintercept, by= c('Id', 'Event', 'Event_trial'))
length(unique(Grid$Id))
length(unique(df$Id))
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, by= c('Event_trial','Event', 'Id'), include_random =T)
Grid = get_datagrid(mod_rintercept, include_random = T)
length(unique(Grid$Id))
Grid = get_datagrid(mod_rintercept, by= c('Id', 'Event', 'Event_trial'))
length(unique(Grid$Id))
ggplot(i_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
Grid = get_datagrid(mod_rintercept, by= c('Id', 'Event', 'Event_trial'), len =100)
length(unique(Grid$Id))
Grid = get_datagrid(mod_rintercept, by= c('Id', 'Event', 'Event_trial'), len =10000)
length(unique(Grid$Id))
View(df)
View(Grid)
Grid = get_datagrid(mod_rintercept, by= c('Id', 'Event', 'Event_trial'), preserve_range = TRUE)
length(unique(Grid$Id))
estimate_expectation(mod_rintercept, include_random=T)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, include_random=T)
ggplot(i_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
View(df)
View(df)
View(df)
sleepstudy
sleepstudy['Subject' == 308 & 'Days'== 2, ]
sleepstudy['Subject' == 370 & 'Days'== 2, ]
sleepstudy[Subject == 370 & Days== 2, ]
#Make na where subject is 370 and days is 2
sleepstudy$Reaction[sleepstudy$Subject == 370 & sleepstudy$Days == 2] <- NA
library(ggeffects)  # For get_datagrid equivalent functionality
# Load necessary packages
library(lme4)
library(dplyr)
library(ggeffects)  # For get_datagrid equivalent functionality
#Make na where subject is 370 and days is 2
data = sleepstudy$Reaction[sleepstudy$Subject == 370 & sleepstudy$Days == 2] <- NA
# Fit a random intercept model
mod_rintercept <- lmer(Reaction ~ Days + (1 | Subject), data = sleepstudy)
length(unique(sleepstudy$Subject)))
length(unique(sleepstudy$Subject))
data$Subject = as.factor(data$Subject)
#Make na where subject is 370 and days is 2
data = sleepstudy$Reaction[sleepstudy$Subject == 370 & sleepstudy$Days == 2] <- NA
data$Subject = as.factor(data$Subject)
data
#Make na where subject is 370 and days is 2
data= sleepstudy
data$Reaction[data$Subject == 370 & data$Days == 2] <- NA
data$Subject = as.factor(data$Subject)
length(unique(data$Subject))
# Fit a random intercept model
mod_rintercept <- lmer(Reaction ~ Days + (1 | Subject), data = data)
# Create a data grid including random effects using ggpredict
grid <- ggpredict(mod_rintercept, terms = c("Days", "Subject"), type = "re")
# Load necessary packages
library(lme4)
library(easystats))
data$Reaction[data$Subject == 370 & data$Days == 2] <- NA
data$Subject = as.factor(data$Subject)
library(easystats)
#Make na where subject is 370 and days is 2
data= sleepstudy
data$Reaction[data$Subject == 370 & data$Days == 2] <- NA
data$Subject = as.factor(data$Subject)
length(unique(data$Subject))
# Fit a random intercept model
mod_rintercept <- lmer(Reaction ~ Days + (1 | Subject), data = data)
# Create a data grid including random effects using ggpredict
grid <- ggpredict(mod_rintercept, terms = c("Days", "Subject"), type = "re")
length(unique(grid$Subject))
grid
# Create a data grid including random effects using ggpredict
grid <- get_datagrid(mod_rintercept, include_random = T)
length(unique(grid$Subject))
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 12
#| fig-width: 10
library(easystats)
library(tidyverse)
library(patchwork)
set.seed(1234)
data <- simulate_simpson(n = 10, groups = 5, r = 0.5,difference = 1.5) %>%
mutate(V2= (V2 +abs(min(V2)))*10000) %>%
rename(Department = Group)
# Lookup vector: map old values to new ones
lookup <- c(G_1 = "Informatics", G_2 = "English",
G_3 = "Sociology", G_4 = "Biology", G_5 = "Statistics")
# Replace values using the lookup vector
data$Department <- lookup[as.character(data$Department)]
one = ggplot(data, aes(x = V1, y = V2)) +
geom_point()+
geom_smooth(method = 'lm')+
labs(y='Salary', x='Year of experience', title = "A. Linear model")+
theme_bw(base_size = 20)
two = ggplot(data, aes(x = V1, y = V2)) +
geom_point(aes(color = Department)) +
geom_smooth(aes(color = Department), method = "lm", alpha = 0.3) +
geom_smooth(method = "lm", alpha = 0.3)+
labs(y='Salary', x='Year of experience', title = "B. Linear model acounting for grouping structure")+
theme_bw(base_size = 20)+
theme(legend.position = 'bottom')
(one / two)
#| message: false
#| warning: false
library(lme4)
library(lmerTest)
library(tidyverse)
library(easystats)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
#| label: Lm
#| message: false
#| warning: false
mod_lm = lm(LookingTime ~ Event_trial*Event, data = df)
summary(mod_lm)
str(df)
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df)
summary(mod_rintercept)
View(df)
Grid = get_datagrid(mod_rintercept, include_random = T)
length(unique(Grid$Id))
unique(Grid$Id)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, by= c('Event_trial','Event'), include_random =F)
ggplot(i_pred, aes(x= Event_trial, y= Predicted))+
geom_point(data = df, aes(y= LookingTime, color= Id, shape = Event), position= position_jitter(width=0.2))+
geom_line(aes(group= Event),color= 'blue', lwd=1.4)+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, group= Event),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_bw(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, include_random =F)
ggplot(i_pred, aes(x= Event_trial, y= Predicted))+
geom_point(data = df, aes(y= LookingTime, color= Id, shape = Event), position= position_jitter(width=0.2))+
geom_line(aes(group= Event),color= 'blue', lwd=1.4)+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, group= Event),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_bw(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, include_random=T)
ggplot(i_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, include_random =F)
ggplot(i_pred, aes(x= Event_trial, y= Predicted))+
geom_point(data = df, aes(y= LookingTime, color= Id, shape = Event), position= position_jitter(width=0.2))+
geom_line(aes(group= Event),color= 'blue', lwd=1.4)+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, group= Event),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_bw(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
s_pred = estimate_relation(mod_rslope, include_random =T)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 12
#| fig-width: 10
library(easystats)
library(tidyverse)
library(patchwork)
set.seed(1234)
data <- simulate_simpson(n = 10, groups = 5, r = 0.5,difference = 1.5) %>%
mutate(V2= (V2 +abs(min(V2)))*10000) %>%
rename(Department = Group)
# Lookup vector: map old values to new ones
lookup <- c(G_1 = "Informatics", G_2 = "English",
G_3 = "Sociology", G_4 = "Biology", G_5 = "Statistics")
# Replace values using the lookup vector
data$Department <- lookup[as.character(data$Department)]
one = ggplot(data, aes(x = V1, y = V2)) +
geom_point()+
geom_smooth(method = 'lm')+
labs(y='Salary', x='Year of experience', title = "A. Linear model")+
theme_bw(base_size = 20)
two = ggplot(data, aes(x = V1, y = V2)) +
geom_point(aes(color = Department)) +
geom_smooth(aes(color = Department), method = "lm", alpha = 0.3) +
geom_smooth(method = "lm", alpha = 0.3)+
labs(y='Salary', x='Year of experience', title = "B. Linear model acounting for grouping structure")+
theme_bw(base_size = 20)+
theme(legend.position = 'bottom')
(one / two)
#| message: false
#| warning: false
library(lme4)
library(lmerTest)
library(tidyverse)
library(easystats)
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) # make sure subject_id is a factor
#| label: Lm
#| message: false
#| warning: false
mod_lm = lm(LookingTime ~ Event_trial*Event, data = df)
summary(mod_lm)
str(df)
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df)
summary(mod_rintercept)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, include_random=T)
ggplot(i_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
i_pred = estimate_expectation(mod_rintercept, include_random =F)
ggplot(i_pred, aes(x= Event_trial, y= Predicted))+
geom_point(data = df, aes(y= LookingTime, color= Id, shape = Event), position= position_jitter(width=0.2))+
geom_line(aes(group= Event),color= 'blue', lwd=1.4)+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, group= Event),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_bw(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
mod_rslope =lmer(LookingTime ~ Event_trial * Event+ (0 + Event_trial | Id ), data= df)
summary(mod_rslope)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
s_pred = estimate_relation(mod_rslope, include_random =T)
ggplot(s_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
mod_rinterraction = lmer(LookingTime ~ Event_trial * Event+ (1 + Event_trial | Id ), data= df)
summary(mod_rinterraction)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
is_pred = estimate_relation(mod_rinterraction, include_random =T)
ggplot(is_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
is_pred = estimate_relation(mod_rinterraction, include_random =T)
ggplot(is_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
View(s_pred)
View(s_pred)
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
is_pred = estimate_expectation(mod_rinterraction, include_random =T)
ggplot(is_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
View(df)
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df,  na.action = na.exclude)
grid = get_datagrid(mod_rintercept, include_random = T)
length(unique(grid$Id)))
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
df$Id = factor(df$Id) #
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df,  na.action = na.exclude)
grid = get_datagrid(mod_rintercept, include_random = T)
length(unique(grid$Id))
grid = get_datagrid(mod_rintercept, by=c("Event_trial", "Event"), include_random = T)
length(unique(grid$Id))
grid = get_datagrid(mod_rintercept, by=c("Event_trial", "Event", 'Id'), include_random = T)
length(unique(grid$Id))
df = read.csv("..\\..\\resources\\Stats\\Dataset.csv")
length(unique(df$Id))
grid = get_datagrid(mod_rintercept, include_random = T, length=2)
length(unique(grid$Id))
View(grid)
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df,  na.action = na.exclude)
# Fixing length = 2 it should be 20 Id by 2 Events by 2 Event_trial it should be 80
grid = get_datagrid(mod_rintercept, include_random = T, length=2)
length(unique(grid$Id))
grid = get_datagrid(mod_rintercept, by=c("Event_trial", "Event"), include_random = T)
length(unique(grid$Id))
grid = get_datagrid(mod_rintercept, by=c("Event_trial", "Event", 'Id'), include_random = T)
length(unique(grid$Id))
grid
grid = get_datagrid(mod_rintercept, by=c("Event_trial", "Event"), include_random = T)
length(unique(grid$Id))
grid
get_datagrid(mod_rintercept, by='all')
get_datagrid(mod_rintercept, by='all', include_random = T)
df <- read.csv("https://raw.githubusercontent.com/TommasoGhilardi/DevStart/main/resources/Stats/Dataset.csv")
df$Id = factor(df$Id)
length(unique(df$Id))
# Model
# Model
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df,  na.action = na.exclude)
df$Id = factor(df$Id)
length(unique(df$Id))
# Model
mod_rintercept =lmer(LookingTime ~ Event_trial * Event+ (1|Id ), data= df,  na.action = na.exclude)
# Fixing length = 2 it should be 20 Id by 2 Events by 2 Event_trial it should be 80
grid = get_datagrid(mod_rintercept, include_random = T, length=2)
length(unique(grid$Id))
grid = get_datagrid(mod_rintercept, by=c("Event_trial", "Event", 'Id'), include_random = T)
length(unique(grid$Id))
get_datagrid(mod_rintercept, by='all', include_random = T)
library(reprex)
reprex({
# Load necessary libraries
library(lme4)
library(easystats)
# Load the dataset from GitHub
df <- read.csv("https://raw.githubusercontent.com/TommasoGhilardi/DevStart/main/resources/Stats/Dataset.csv")
# Ensure 'Id' is treated as a factor
df$Id <- factor(df$Id)
# Check the number of unique subjects
length(unique(df$Id))  # Expected: 20
# Fit the mixed-effects model with random intercepts for 'Id'
mod_rintercept <- lmer(
LookingTime ~ Event_trial * Event + (1 | Id),
data = df)
# Generate a data grid with random effects included
# Using 'length = 2' is expected to produce 20 Ids * 2 Events * 2 Event_trials = 80 rows
grid <- get_datagrid(mod_rintercept, include_random = TRUE, length = 2)
length(unique(grid$Id))  # Check unique Ids in the grid
# Generate the data grid explicitly specifying grouping variables
grid <- get_datagrid(mod_rintercept, by = c("Event_trial", "Event", "Id"), include_random = TRUE)
length(unique(grid$Id))  # Check unique Ids again
})
# Load the dataset from GitHub
df <- read.csv("https://raw.githubusercontent.com/TommasoGhilardi/DevStart/main/resources/Stats/Dataset.csv")
# Ensure 'Id' is treated as a factor
df$Id <- factor(df$Id)
# Check the number of unique subjects
length(unique(df$Id))  # Expected: 20
# Fit the mixed-effects model with random intercepts for 'Id'
mod_rintercept <- lmer(
LookingTime ~ Event_trial * Event + (1 | Id),
data = df)
# Generate a data grid with random effects included
# Using 'length = 2' is expected to produce 20 Ids * 2 Events * 2 Event_trials = 80 rows
grid <- get_datagrid(mod_rintercept, include_random = TRUE, length = 2)
length(unique(grid$Id))  # Check unique Ids in the grid
grid <- get_datagrid(
mod_rintercept,
by = c("Event_trial", "Event", "Id"),
include_random = TRUE,
preserve_range = FALSE
)
length(unique(grid$Id))  # Should be 20 if all IDs are in the original data
#| code-fold: true
#| message: false
#| warning: false
#| fig-height: 8
#| fig-width: 12
s_pred = estimate_expectation(mod_rslope, include_random =T)
ggplot(s_pred, aes(x= Event_trial, y= Predicted, color= Id, shape = Event))+
geom_point(data = df, aes(y= LookingTime, color= Id), position= position_jitter(width=0.2))+
geom_line()+
geom_ribbon(aes(ymin=Predicted-SE, ymax=Predicted+SE, fill = Id),color= 'transparent', alpha=0.1)+
labs(y='Looking time', x='# trial')+
theme_modern(base_size = 20)+
theme(legend.position = 'none')+
facet_wrap(~Event)
