plt.show()
#| fig-align: "center"
plt.figure()
# Barplot
ax = sns.barplot(data=LookingTime, y="dur", hue='Event',x = 'Event', dodge=True,width=0.6)
# ax.set_ylabel("Duration")
# ax.legend(title='Event')
# Place the legend
sns.move_legend(ax,loc="upper left")
# Show the plot
plt.show()
plt.figure()
# Barplot with the same x and hue
ax = sns.barplot(data=LookingTime, y="dur", x='Event', hue='Event', dodge=True, width=0.6)
ax.set_ylabel("Duration")
ax.legend(title='Event')
# Place the legend
sns.move_legend(ax, loc="upper left")
# Show the plot
plt.show()
#| fig-align: "center"
plt.figure()
# Barplot
ax = sns.barplot(data=LookingTime, y="dur", hue = 'Event', dodge=True,width=0.6)
# ax.set_ylabel("Duration")
# ax.legend(title='Event')
# Place the legend
sns.move_legend(ax,loc="upper left")
# Show the plot
plt.show()
#| fig-align: "center"
plt.figure()
# Barplot
ax = sns.barplot(data=LookingTime, y="dur", hue = 'Event')
# ax.set_ylabel("Duration")
# ax.legend(title='Event')
# Place the legend
sns.move_legend(ax,loc="upper left")
# Show the plot
plt.show()
#| fig-align: "center"
plt.figure()
# Barplot
ax = sns.barplot(data=LookingTime, y="dur", hue = 'Event', x = 'Event')
# ax.set_ylabel("Duration")
# ax.legend(title='Event')
# Place the legend
sns.move_legend(ax,loc="upper left")
# Show the plot
plt.show()
#| fig-align: "center"
plt.figure()
# Barplot
ax = sns.barplot(data=LookingTime, y="dur", hue = 'Event', x = 'Event')
ax.set_ylabel("Duration")
# Show the plot
plt.show()
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
#%% Settings
# Screen resolution
screensize = (1920, 1080)
#%% Read and prepare data
# The fixation data extracted from I2MC
Fixations = pd.read_csv('..\\..\\resources\\FromFixationToData\\DATA\\i2mc_output\\Adult1\\Adult1.csv')
# The original RAW data
Raw_data = pd.read_csv('..\\..\\resources\\FromFixationToData\\DATA\\RAW\\Adult1.csv')
# Screen resolution
screensize = (1920, 1080)
# Define the variable realted to AOIs and target position
dimension_of_AOI = 600/2  #the dimension of the AOIs, divided by 2
Target_position = 500 #the position of the targets relative to the centre (e.g., 500 pixels on the right from the centre)
# Create areas of intescreensizet
AOI1 =[[screensize[0]/2 - Target_position - dimension_of_AOI, screensize[1]/2-dimension_of_AOI], [screensize[0]/2 - Target_position + dimension_of_AOI, screensize[1]/2 + dimension_of_AOI]]
AOI2 =[[screensize[0]/2 + Target_position - dimension_of_AOI, screensize[1]/2-dimension_of_AOI], [screensize[0]/2 + Target_position + dimension_of_AOI, screensize[1]/2 + dimension_of_AOI]]
AOIs = [AOI1, AOI2]
#| fig-align: "center"
#| code-fold: true
import matplotlib.pyplot as plt
import matplotlib.patches as patches
# Create a figure
fig, ax = plt.subplots(1, figsize=(8,4.4))
# Set the limits of the plot
ax.set_xlim(0, 1920)
ax.set_ylim(0, 1080)
# Define the colors for the rectangles
colors = ['#46AEB9', '#C7D629']
# Create a rectangle for each area of interest and add it to the plot
for i, (bottom_left, top_right) in enumerate(AOIs):
width = top_right[0] - bottom_left[0]
height = top_right[1] - bottom_left[1]
rectangle = patches.Rectangle(bottom_left, width, height, linewidth=2, edgecolor='k', facecolor=colors[i])
ax.add_patch(rectangle)
ax.plot(600,500,marker='o', markersize=8, color='green')
ax.plot(1400,1000,marker='o', markersize=8, color='red')
# Show the plot
plt.show()
# We define a function that simply takes the a point and a list of areas.
# This function checks in which area this point is and return the index
# of the area. If the point is in no area it returns -1
def find_area_for_point(point, areas):
for i, area in enumerate(areas):
# Extract bottom left and top right points
bottom_left, top_right = area
# Extract the x and y of each point
bottom_x, bottom_y = bottom_left
top_x, top_y = top_right
# Extract the x and y of our point of interest
x, y = point
# Check if the point is in the area
if bottom_x <= x <= top_x and bottom_y <= y <= top_y :
return(i)
return(-1)
# Let's find the time we presented a reward or no reward
Targets = Raw_data.loc[(Raw_data['Event'] == 'Reward') | (Raw_data['Event'] == 'NoReward'), ['time', 'Event']].values
# Find the fixations that we care about
pre  = -750
post = 400
for i,c in enumerate(Targets):
# Find which row meets our conditions
mask = (Fixations['startT'] >= c[0]+pre) & (Fixations['startT'] < c[0]+post)
# Fill the rows with have found with more info
Fixations.loc[mask, 'Event'] = c[1]
Fixations.loc[mask, 'Event_trial'] = i
Fixations.loc[mask, 'Onset'] =  c[0]
# We can drop the NANs to have only the fixations that interest us!!!!
Target_fixations = Fixations[Fixations['Event'].notna()].reset_index(drop = True)
Target_fixations['AOIs'] = [AOIs]* len(Target_fixations)
Target_fixations['Looked_AOI'] = np.NAN
# We run the function  for each row. We pass each xpos and ypos to the function
# toghether with the areas
for row in range(len(Target_fixations)):
Point = Target_fixations.loc[row, ['xpos', 'ypos']].values
Areas = Target_fixations.loc[row, 'AOIs']
Target_fixations.loc[row, 'Looked_AOI'] = find_area_for_point(Point, Areas)
# Filter for AOI of interest
Target_fixations = Target_fixations[Target_fixations['Looked_AOI'] != -1]
# We define which is the correct AOI that the participant should have looked at.
Target_fixations.loc[Target_fixations['Event'] == 'NoReward', 'Correct_Aoi'] = 0
Target_fixations.loc[Target_fixations['Event'] == 'Reward'  , 'Correct_Aoi'] = 1
# We select only the correct fixations
Correct_Target_fixations = Target_fixations.loc[Target_fixations['Correct_Aoi'] == Target_fixations['Looked_AOI'],]
Correct_Target_fixations['Latency'] = Correct_Target_fixations['startT'] - Correct_Target_fixations['Onset']
# We extract the first fixation of our dataframe for each event
SaccadicLatency = Correct_Target_fixations.groupby(['Event', 'Event_trial'])['Latency'].min().reset_index()
#| fig-align: "center"
import seaborn as sns # import seaborn
plt.figure()
# Scatterplot
ax = sns.scatterplot(data=SaccadicLatency, x="Event_trial", y="Latency", hue='Event')
# Place the legend
sns.move_legend(ax,loc="upper left")
# Show the plot
plt.show()
# Using groupby we can extract the sum of the duration of the fixation for each reward and trial
LookingTime = Target_fixations.groupby(['Event', 'Event_trial', 'Looked_AOI'], as_index=False)['dur'].sum()
#| fig-align: "center"
plt.figure()
# Barplot
ax = sns.barplot(data=LookingTime, y="dur", hue = 'Event', x = 'Event')
ax.set_ylabel("Duration")
# Show the plot
plt.show()
reticulate::repl_python()
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
#%% Settings
# Screen resolution
screensize = (1920, 1080)
#%% Read and prepare data
# The fixation data extracted from I2MC
Fixations = pd.read_csv('..\\..\\resources\\FromFixationToData\\DATA\\i2mc_output\\Adult1\\Adult1.csv')
# The original RAW data
Raw_data = pd.read_csv('..\\..\\resources\\FromFixationToData\\DATA\\RAW\\Adult1.csv')
# Screen resolution
screensize = (1920, 1080)
# Define the variable realted to AOIs and target position
dimension_of_AOI = 600/2  #the dimension of the AOIs, divided by 2
Target_position = 500 #the position of the targets relative to the centre (e.g., 500 pixels on the right from the centre)
# Create areas of intescreensizet
AOI1 =[[screensize[0]/2 - Target_position - dimension_of_AOI, screensize[1]/2-dimension_of_AOI], [screensize[0]/2 - Target_position + dimension_of_AOI, screensize[1]/2 + dimension_of_AOI]]
AOI2 =[[screensize[0]/2 + Target_position - dimension_of_AOI, screensize[1]/2-dimension_of_AOI], [screensize[0]/2 + Target_position + dimension_of_AOI, screensize[1]/2 + dimension_of_AOI]]
AOIs = [AOI1, AOI2]
#| fig-align: "center"
#| code-fold: true
import matplotlib.pyplot as plt
import matplotlib.patches as patches
# Create a figure
fig, ax = plt.subplots(1, figsize=(8,4.4))
# Set the limits of the plot
ax.set_xlim(0, 1920)
ax.set_ylim(0, 1080)
# Define the colors for the rectangles
colors = ['#46AEB9', '#C7D629']
# Create a rectangle for each area of interest and add it to the plot
for i, (bottom_left, top_right) in enumerate(AOIs):
width = top_right[0] - bottom_left[0]
height = top_right[1] - bottom_left[1]
rectangle = patches.Rectangle(bottom_left, width, height, linewidth=2, edgecolor='k', facecolor=colors[i])
ax.add_patch(rectangle)
ax.plot(600,500,marker='o', markersize=8, color='green')
ax.plot(1400,1000,marker='o', markersize=8, color='red')
# Show the plot
plt.show()
# We define a function that simply takes the a point and a list of areas.
# This function checks in which area this point is and return the index
# of the area. If the point is in no area it returns -1
def find_area_for_point(point, areas):
for i, area in enumerate(areas):
# Extract bottom left and top right points
bottom_left, top_right = area
# Extract the x and y of each point
bottom_x, bottom_y = bottom_left
top_x, top_y = top_right
# Extract the x and y of our point of interest
x, y = point
# Check if the point is in the area
if bottom_x <= x <= top_x and bottom_y <= y <= top_y :
return(i)
return(-1)
# Let's find the time we presented a reward or no reward
Targets = Raw_data.loc[(Raw_data['Event'] == 'Reward') | (Raw_data['Event'] == 'NoReward'), ['time', 'Event']].values
# Find the fixations that we care about
pre  = -750
post = 400
for i,c in enumerate(Targets):
# Find which row meets our conditions
mask = (Fixations['startT'] >= c[0]+pre) & (Fixations['startT'] < c[0]+post)
# Fill the rows with have found with more info
Fixations.loc[mask, 'Event'] = c[1]
Fixations.loc[mask, 'Event_trial'] = i
Fixations.loc[mask, 'Onset'] =  c[0]
# We can drop the NANs to have only the fixations that interest us!!!!
Target_fixations = Fixations[Fixations['Event'].notna()].reset_index(drop = True)
Target_fixations['AOIs'] = [AOIs]* len(Target_fixations)
Target_fixations['Looked_AOI'] = np.NAN
# We run the function  for each row. We pass each xpos and ypos to the function
# toghether with the areas
for row in range(len(Target_fixations)):
Point = Target_fixations.loc[row, ['xpos', 'ypos']].values
Areas = Target_fixations.loc[row, 'AOIs']
Target_fixations.loc[row, 'Looked_AOI'] = find_area_for_point(Point, Areas)
# Filter for AOI of interest
Target_fixations = Target_fixations[Target_fixations['Looked_AOI'] != -1]
# We define which is the correct AOI that the participant should have looked at.
Target_fixations.loc[Target_fixations['Event'] == 'NoReward', 'Correct_Aoi'] = 0
Target_fixations.loc[Target_fixations['Event'] == 'Reward'  , 'Correct_Aoi'] = 1
# We select only the correct fixations
Correct_Target_fixations = Target_fixations.loc[Target_fixations['Correct_Aoi'] == Target_fixations['Looked_AOI'],]
Correct_Target_fixations['Latency'] = Correct_Target_fixations['startT'] - Correct_Target_fixations['Onset']
# We extract the first fixation of our dataframe for each event
SaccadicLatency = Correct_Target_fixations.groupby(['Event', 'Event_trial'])['Latency'].min().reset_index()
#| fig-align: "center"
import seaborn as sns # import seaborn
plt.figure()
# Scatterplot
ax = sns.scatterplot(data=SaccadicLatency, x="Event_trial", y="Latency", hue='Event')
# Place the legend
sns.move_legend(ax,loc="upper left")
# Show the plot
plt.show()
# Using groupby we can extract the sum of the duration of the fixation for each reward and trial
LookingTime = Target_fixations.groupby(['Event', 'Event_trial', 'Looked_AOI'], as_index=False)['dur'].sum()
#| fig-align: "center"
plt.figure()
# Barplot
ax = sns.barplot(data=LookingTime, y="dur", hue = 'Event', x = 'Event')
ax.set_ylabel("Duration")
# Show the plot
plt.show()
# We define which is the correct AOI that the participant should have looked at.
Target_fixations.loc[Target_fixations['Event'] == 'NoReward', 'Correct_Aoi'] = 0
Target_fixations.loc[Target_fixations['Event'] == 'Reward'  , 'Correct_Aoi'] = 1
# We select only the correct fixations
Correct_Target_fixations = Target_fixations.loc[Target_fixations['Correct_Aoi'] == Target_fixations['Looked_AOI'],]
# We define which is the correct AOI that the participant should have looked at.
Target_fixations.loc[Target_fixations['Event'] == 'NoReward', 'Correct_Aoi'] = 0
Target_fixations.loc[Target_fixations['Event'] == 'Reward'  , 'Correct_Aoi'] = 1
# We select only the correct fixations
Correct_Target_fixations = Target_fixations.loc[Target_fixations['Correct_Aoi'] == Target_fixations['Looked_AOI'],]
# We define which is the correct AOI that the participant should have looked at.
Target_fixations.loc[Target_fixations['Event'] == 'NoReward', 'Correct_Aoi'] = 0
Target_fixations.loc[Target_fixations['Event'] == 'Reward'  , 'Correct_Aoi'] = 1
# We select only the correct fixations
Correct_Target_fixations = Target_fixations.loc[Target_fixations['Correct_Aoi'] == Target_fixations['Looked_AOI'],]
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
#%% Settings
# Screen resolution
screensize = (1920, 1080)
#%% Read and prepare data
# The fixation data extracted from I2MC
Fixations = pd.read_csv('..\\..\\resources\\FromFixationToData\\DATA\\i2mc_output\\Adult1\\Adult1.csv')
# The original RAW data
Raw_data = pd.read_csv('..\\..\\resources\\FromFixationToData\\DATA\\RAW\\Adult1.csv')
# Screen resolution
screensize = (1920, 1080)
# Define the variable realted to AOIs and target position
dimension_of_AOI = 600/2  #the dimension of the AOIs, divided by 2
Target_position = 500 #the position of the targets relative to the centre (e.g., 500 pixels on the right from the centre)
# Create areas of intescreensizet
AOI1 =[[screensize[0]/2 - Target_position - dimension_of_AOI, screensize[1]/2-dimension_of_AOI], [screensize[0]/2 - Target_position + dimension_of_AOI, screensize[1]/2 + dimension_of_AOI]]
AOI2 =[[screensize[0]/2 + Target_position - dimension_of_AOI, screensize[1]/2-dimension_of_AOI], [screensize[0]/2 + Target_position + dimension_of_AOI, screensize[1]/2 + dimension_of_AOI]]
AOIs = [AOI1, AOI2]
#| fig-align: "center"
#| code-fold: true
import matplotlib.pyplot as plt
import matplotlib.patches as patches
# Create a figure
fig, ax = plt.subplots(1, figsize=(8,4.4))
# Set the limits of the plot
ax.set_xlim(0, 1920)
ax.set_ylim(0, 1080)
# Define the colors for the rectangles
colors = ['#46AEB9', '#C7D629']
# Create a rectangle for each area of interest and add it to the plot
for i, (bottom_left, top_right) in enumerate(AOIs):
width = top_right[0] - bottom_left[0]
height = top_right[1] - bottom_left[1]
rectangle = patches.Rectangle(bottom_left, width, height, linewidth=2, edgecolor='k', facecolor=colors[i])
ax.add_patch(rectangle)
ax.plot(600,500,marker='o', markersize=8, color='green')
ax.plot(1400,1000,marker='o', markersize=8, color='red')
# Show the plot
plt.show()
# We define a function that simply takes the a point and a list of areas.
# This function checks in which area this point is and return the index
# of the area. If the point is in no area it returns -1
def find_area_for_point(point, areas):
for i, area in enumerate(areas):
# Extract bottom left and top right points
bottom_left, top_right = area
# Extract the x and y of each point
bottom_x, bottom_y = bottom_left
top_x, top_y = top_right
# Extract the x and y of our point of interest
x, y = point
# Check if the point is in the area
if bottom_x <= x <= top_x and bottom_y <= y <= top_y :
return(i)
return(-1)
# Let's find the time we presented a reward or no reward
Targets = Raw_data.loc[(Raw_data['Event'] == 'Reward') | (Raw_data['Event'] == 'NoReward'), ['time', 'Event']].values
# Find the fixations that we care about
pre  = -750
post = 400
for i,c in enumerate(Targets):
# Find which row meets our conditions
mask = (Fixations['startT'] >= c[0]+pre) & (Fixations['startT'] < c[0]+post)
# Fill the rows with have found with more info
Fixations.loc[mask, 'Event'] = c[1]
Fixations.loc[mask, 'Event_trial'] = i
Fixations.loc[mask, 'Onset'] =  c[0]
# We can drop the NANs to have only the fixations that interest us!!!!
Target_fixations = Fixations[Fixations['Event'].notna()].reset_index(drop = True)
Target_fixations['AOIs'] = [AOIs]* len(Target_fixations)
Target_fixations['Looked_AOI'] = np.NAN
# We run the function  for each row. We pass each xpos and ypos to the function
# toghether with the areas
for row in range(len(Target_fixations)):
Point = Target_fixations.loc[row, ['xpos', 'ypos']].values
Areas = Target_fixations.loc[row, 'AOIs']
Target_fixations.loc[row, 'Looked_AOI'] = find_area_for_point(Point, Areas)
# Filter for AOI of interest
Target_fixations = Target_fixations[Target_fixations['Looked_AOI'] != -1]
# We define which is the correct AOI that the participant should have looked at.
Target_fixations.loc[Target_fixations['Event'] == 'NoReward', 'Correct_Aoi'] = 0
Target_fixations.loc[Target_fixations['Event'] == 'Reward'  , 'Correct_Aoi'] = 1
# We select only the correct fixations
Correct_Target_fixations = Target_fixations.loc[Target_fixations['Correct_Aoi'] == Target_fixations['Looked_AOI'],]
Correct_Target_fixations['Latency'] = Correct_Target_fixations['startT'] - Correct_Target_fixations['Onset']
# We extract the first fixation of our dataframe for each event
SaccadicLatency = Correct_Target_fixations.groupby(['Event', 'Event_trial'])['Latency'].min().reset_index()
#| fig-align: "center"
import seaborn as sns # import seaborn
plt.figure()
# Scatterplot
ax = sns.scatterplot(data=SaccadicLatency, x="Event_trial", y="Latency", hue='Event')
# Place the legend
sns.move_legend(ax,loc="upper left")
# Show the plot
plt.show()
# Using groupby we can extract the sum of the duration of the fixation for each reward and trial
LookingTime = Target_fixations.groupby(['Event', 'Event_trial', 'Looked_AOI'], as_index=False)['dur'].sum()
#| fig-align: "center"
plt.figure()
# Barplot
ax = sns.barplot(data=LookingTime, y="dur", hue = 'Event', x = 'Event')
ax.set_ylabel("Duration")
# Show the plot
plt.show()
reticulate::repl_python()
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
#%% Settings
# Screen resolution
screensize = (1920, 1080)
#%% Read and prepare data
# The fixation data extracted from I2MC
Fixations = pd.read_csv('..\\..\\resources\\FromFixationToData\\DATA\\i2mc_output\\Adult1\\Adult1.csv')
# The original RAW data
Raw_data = pd.read_csv('..\\..\\resources\\FromFixationToData\\DATA\\RAW\\Adult1.csv')
# Screen resolution
screensize = (1920, 1080)
# Define the variable realted to AOIs and target position
dimension_of_AOI = 600/2  #the dimension of the AOIs, divided by 2
Target_position = 500 #the position of the targets relative to the centre (e.g., 500 pixels on the right from the centre)
# Create areas of intescreensizet
AOI1 =[[screensize[0]/2 - Target_position - dimension_of_AOI, screensize[1]/2-dimension_of_AOI], [screensize[0]/2 - Target_position + dimension_of_AOI, screensize[1]/2 + dimension_of_AOI]]
AOI2 =[[screensize[0]/2 + Target_position - dimension_of_AOI, screensize[1]/2-dimension_of_AOI], [screensize[0]/2 + Target_position + dimension_of_AOI, screensize[1]/2 + dimension_of_AOI]]
AOIs = [AOI1, AOI2]
#| fig-align: "center"
#| code-fold: true
import matplotlib.pyplot as plt
import matplotlib.patches as patches
# Create a figure
fig, ax = plt.subplots(1, figsize=(8,4.4))
# Set the limits of the plot
ax.set_xlim(0, 1920)
ax.set_ylim(0, 1080)
# Define the colors for the rectangles
colors = ['#46AEB9', '#C7D629']
# Create a rectangle for each area of interest and add it to the plot
for i, (bottom_left, top_right) in enumerate(AOIs):
width = top_right[0] - bottom_left[0]
height = top_right[1] - bottom_left[1]
rectangle = patches.Rectangle(bottom_left, width, height, linewidth=2, edgecolor='k', facecolor=colors[i])
ax.add_patch(rectangle)
ax.plot(600,500,marker='o', markersize=8, color='green')
ax.plot(1400,1000,marker='o', markersize=8, color='red')
# Show the plot
plt.show()
# We define a function that simply takes the a point and a list of areas.
# This function checks in which area this point is and return the index
# of the area. If the point is in no area it returns -1
def find_area_for_point(point, areas):
for i, area in enumerate(areas):
# Extract bottom left and top right points
bottom_left, top_right = area
# Extract the x and y of each point
bottom_x, bottom_y = bottom_left
top_x, top_y = top_right
# Extract the x and y of our point of interest
x, y = point
# Check if the point is in the area
if bottom_x <= x <= top_x and bottom_y <= y <= top_y :
return(i)
return(-1)
# Let's find the time we presented a reward or no reward
Targets = Raw_data.loc[(Raw_data['Event'] == 'Reward') | (Raw_data['Event'] == 'NoReward'), ['time', 'Event']].values
# Find the fixations that we care about
pre  = -750
post = 400
for i,c in enumerate(Targets):
# Find which row meets our conditions
mask = (Fixations['startT'] >= c[0]+pre) & (Fixations['startT'] < c[0]+post)
# Fill the rows with have found with more info
Fixations.loc[mask, 'Event'] = c[1]
Fixations.loc[mask, 'Event_trial'] = i
Fixations.loc[mask, 'Onset'] =  c[0]
# We can drop the NANs to have only the fixations that interest us!!!!
Target_fixations = Fixations[Fixations['Event'].notna()].reset_index(drop = True)
Target_fixations['AOIs'] = [AOIs]* len(Target_fixations)
Target_fixations['Looked_AOI'] = np.NAN
# We run the function  for each row. We pass each xpos and ypos to the function
# toghether with the areas
for row in range(len(Target_fixations)):
Point = Target_fixations.loc[row, ['xpos', 'ypos']].values
Areas = Target_fixations.loc[row, 'AOIs']
Target_fixations.loc[row, 'Looked_AOI'] = find_area_for_point(Point, Areas)
# Filter for AOI of interest
Target_fixations = Target_fixations[Target_fixations['Looked_AOI'] != -1]
#| warning: false
#| message: false
# We define which is the correct AOI that the participant should have looked at.
Target_fixations.loc[Target_fixations['Event'] == 'NoReward', 'Correct_Aoi'] = 0
Target_fixations.loc[Target_fixations['Event'] == 'Reward'  , 'Correct_Aoi'] = 1
# We select only the correct fixations
Correct_Target_fixations = Target_fixations.loc[Target_fixations['Correct_Aoi'] == Target_fixations['Looked_AOI'],]
Correct_Target_fixations['Latency'] = Correct_Target_fixations['startT'] - Correct_Target_fixations['Onset']
# We extract the first fixation of our dataframe for each event
SaccadicLatency = Correct_Target_fixations.groupby(['Event', 'Event_trial'])['Latency'].min().reset_index()
#| fig-align: "center"
import seaborn as sns # import seaborn
plt.figure()
# Scatterplot
ax = sns.scatterplot(data=SaccadicLatency, x="Event_trial", y="Latency", hue='Event')
# Place the legend
sns.move_legend(ax,loc="upper left")
# Show the plot
plt.show()
# Using groupby we can extract the sum of the duration of the fixation for each reward and trial
LookingTime = Target_fixations.groupby(['Event', 'Event_trial', 'Looked_AOI'], as_index=False)['dur'].sum()
#| fig-align: "center"
plt.figure()
# Barplot
ax = sns.barplot(data=LookingTime, y="dur", hue = 'Event', x = 'Event')
ax.set_ylabel("Duration")
# Show the plot
plt.show()
