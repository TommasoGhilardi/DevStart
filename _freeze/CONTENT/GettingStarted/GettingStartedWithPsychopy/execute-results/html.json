{
  "hash": "c511ed2d8ab71659150ce19163a5012a",
  "result": {
    "markdown": "---\ntitle: \"Starting with PsychoPy\"\nexecute:\n  eval: false\n\nauthor-meta: Tommaso Ghilardi\ndescription-meta: \"Learn how to get started with PsychoPy, an open-source software package for neuroscience and experimental psychology research. Follow our step-by-step guide to install PsychoPy, create experiments, and more.\"\nkeywords: \"PsychoPy, Python, experimental psychology, neuroscience, tutorial, installation, experiment, DevStart, developmental science\"\n---\n\nPsychoPy is an open source software package written in the Python programming language primarily for use in neuroscience and experimental psychology research. It's one of our favorite ways to create experiments and we will use it through our tutorials.\n\nSo, let's start and install PsychoPy!!!\n\n# Install PsychoPy\n\nAs reported on the PsychoPy [website](https://www.psychopy.org/download.html), there are multiple ways to install PsychoPy. Our favorite way to install it is using conda (refer to the [Getting started with python](GettingStartedWithPython.qmd)).\n\nPsychoPy offers a nice .yml file that will install everything that we need. Download the [file](https://raw.githubusercontent.com/psychopy/psychopy/master/conda/psychopy-env.yml) from their website and store it somewhere.\n\nNow open the Anaconda prompt and type:\n\n``` bash\nconda env create -f  your_dowloaded_file.yml\n```\n\nThis will take some time and will ask for confirmation but in the end you will have a nice virtual environment containing everything you need to run your experiment on PsychoPy.\n\nThe virtual environment will be called \"psychopy\" and you can activate it just by typing:\n\n``` bash\nconda activate psychopy\n```\n\nWe are done!! You now should have a nice conda environment called \"psychoPy\" with PsychoPy in it. To launch the PsychoPy Gui (also referred to as Builder) you can just type `psychopy` in your Anaconda prompt and PsychoPy will launch. You are definitely free to try the Builder or the Coder that PsychoPy offers, however we usually prefer to write and launch our scripts from Spyder, let's be honest, if you want to code your experiment the Gui of Spyder is way better!!\n\nThus we suggest to install Spyder in your newly created \"psychopy\" environment. You can do that just by simply typing in:\n\n``` bash\nconda install â€“c anaconda spyder\n```\n\nYou can also refer to our guide [InstallingSpyderide](GettingStartedWithPython.qmd#sec-installspyder).\n\nNow that you should have both PsychoPy and Spyder installed let's see how to create a simple experiment with them.\n\n# Let's create our first experiment using PsychoPy.\n\nWe will create a very simple and basic experiment that will be the stepping stone for some of the future tutorials. In the future tutorials we will show you how to extend and make this tutorial in a real experiment.\n\n::: callout-important\n## Stimuli!\n\nYou can download from [here](/resources/getting_started_psychopy/getting_started_psychopy.zip) the stimuli that we will use in this example. They are very simple and basic stimuli:\n\n-   a fixation cross\n-   two cues (a circle and a square)\n-   a reward (a cute medal)\n-   a non-reward (a cartoon of an exploding empty cloud)\n-   a sound of winning at an arcade game\n-   a sound of losing at an arcade game\n:::\n\nIn this tutorial we will create an experiment in which, after the fixation cross, one of the two cues is presented. The cues will indicate whether we will receive a reward or not and where this will appear. After the circle is presented as cue the medal will be presented on the right. After the circle the empty cloud will be presented on the left. Thus, if you follow the cued indication you will be able to predict the location of the next stimuli and whether or not it will be rewarding. Here below you can find a graphic representation of the design:\\\n![](/images/GettingStartedWithPsychopy/Design.jpg)\n\n## Preparation:\n\nFirst thing first let's import the relevant libraries and define the path where our stimuli are in. PsychoPy has a lot of different modules that allow us to interface with different type of stimuli and systems. For this tutorial\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import some libraries from PsychoPy and others\nimport os\nfrom psychopy import core\nfrom psychopy import visual  \nfrom psychopy import sound\n```\n:::\n\n\n## Stimuli:\n\nThe next step is to create the window The window is what we will show the stimuli in; it is the canvas in which to draw objects. For now we will create a small window of 960\\*540 pixels. In this way we will able to see the stimuli and still interact with the rest of our pc interface. In a real experiment we would probably set the window dimension to the entirety of the the display (Fullscreen).\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Winsize\nwinsize = (1920, 1080)\n\n# create a window\nwin = visual.Window(size = winsize,fullscr=True, units=\"pix\", pos =(0,30), screen=1)\n\n#create a window\nwin = visual.Window([1920,1080], units=\"pix\")\n```\n:::\n\n\nNow let's import the stimuli that we will present in this tutorial. We have 5 stimuli:\n\n-   a fixation cross that we will use to catch the attention of our participants\n-   a circle that will be our cue that signal a rewarding trial\n-   a square that will be our cue that signal a non-rewarding trial\n-   a cartoon of a medal that will be our reward\n-   a cartoon of an empty cloud that will be our non-reward\n\nOn top of these visual stimuli we will also import two sounds that will help us signal the type of trials. So:\n\n-   a *tada!* winning sound\n-   a *papapaaa!* losing sound\n\n::: callout-tip\nWhen importing a visual stimulus we need to pass to the importing function in which window it will be displayed. In our case we will pass all of them the \"win\" window that we just created.\n:::\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n#%% Load and prepare stimuli\n\n# Setting directory of our experiment\nos.chdir('C:\\\\Users\\\\CBCD\\\\Desktop\\\\BCCCD')\n\n\n# Load images\nfixation = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\fixation.png', size = (200, 200))\ncircle   = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\circle.png', size = (200, 200))\nsquare   = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\square.png', size = (200, 200))\nwinning   = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\winning.png', size = (200, 200), pos=(560,0))\nloosing  = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\loosing.png', size = (200, 200), pos=(-560,0))\n\n# Load sound\nwinning_sound = sound.Sound('EXP\\\\getting_started_psychopy\\\\winning.wav')\nlosing_sound = sound.Sound('EXP\\\\getting_started_psychopy\\\\loosing.wav')\n\n# List of stimuli\ncues = [circle, square] # put both cues in a list\nrewards = [winning, loosing] # put both rewards in a list\nsounds = [winning_sound,losing_sound] # put both sounds in a list\n\n# Create list of trials in which 0 means winning and 1 means losing\nTrials = [0, 1, 0, 0, 1, 0, 1, 1, 0, 1 ]\n\n\n# Load images\nfixation = visual.ImageStim(win, image=Path + 'fixation.png', size = (100, 100))\ncircle   = visual.ImageStim(win, image=Path + 'circle.png', size = (100, 100))\nsquare   = visual.ImageStim(win, image=Path + 'square.png', size = (100, 100))\nwinning   = visual.ImageStim(win, image=Path + 'winning.png', size = (100, 100), pos=(250,0))\nloosing  = visual.ImageStim(win, image=Path + 'loosing.png', size = (100, 100), pos=(-250,0))\n\n# Load sound\nwinning_sound = sound.Sound(Path + 'winning.wav')\nlosing_sound = sound.Sound(Path + 'loosing.wav')\n```\n:::\n\n\nNote that in this simple experiment we will present the reward always on the right and the non-rewards always on the left that's why when we import the two rewards we set their `pos` to `(250,0)` and `(-250,0)`. The first value indicates the number of pixels on the x-axis and the second the number of pixels on the y-axis.\n\n## Show a visual stimulus:\n\nNo we want to show a stimuli in the center of our window. To do so we will have to use the function \"draw\". As the name suggests this function draws the stimulus that we want on the window.\n\nLet's start with displaying the fixation cross in the center.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Draw the fixation\nfixation.draw()\n```\n:::\n\n\nDo you see the fixation cross?????? Probably not!! This is because we have drawn the fixation cross but we have not refreshed the window. Psychopy allows you to draw as many stimuli as you want on a window but the changes are only shown when you \"refresh\" the window. To do so we need to use the \"flip\" function.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nwin.flip()\n```\n:::\n\n\nPerfect!!!! The fixation cross is there. Before each flip we need to draw our objects. Otherwise we will only see the basic window with nothing in it. Let's try!!! flip the window now.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Flipping the window (refreshing)\nwin.flip()\n```\n:::\n\n\nThe fixation is gone again! Exactly as predicted. Flipping the window allows us to draw and show something new each frame. This means that the speed limit of our presentation is the actual frame rate of our display. *If we have a 60Hz display we can present an image 60 times in a second.*\n\nSo if we want to present our fixation for an entire second we would have to draw and flip it 60 times (our display has a refresh rate of 60Hz)! Let's try:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfor _ in range(60):\n    fixation.draw()\n    win.flip()\nwin.flip() # we re-flip at the end to clean the window\n```\n:::\n\n\nNow we have shown the fixation for 1 second and then it disappeared. Nice!! However you probably have already figured out that what we have done was unnecessary. If we want to present a static stimulus for 1s we could have just drawn it, flip the window and then wait for 1s. But now you have an idea on how to show animated stimuli or even videos!!! **AMAZING!!!**.\n\nNow let's try to show the fixation for 1s by just waiting.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nfixation.draw()\nwin.flip()\ncore.wait(1)  # wait for 1 second\nwin.flip()    # we re-flip at the end to clean the window\n```\n:::\n\n\n## Play a sound:\n\nWe have seen how to show a stimulus let's now play the sounds that we have imported. This is extremely simple, we can just `play()` them:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nwinning_sound.play()\ncore.wait(2)\nlosing_sound.play()\n```\n:::\n\n\nGreat now we have played our two sounds!!\n\n::: callout-warning\nWhen playing a sound the script will continue and will not wait for the sound to have finished playing. So if you play two sounds one after without waiting the two sounds will play overlapping. That's why we have used `core.wait(2)`, this tells PsychoPy to wait 2 seconds after starting to play the sound.\n:::\n\n## Create a trial:\n\nNow let's try to put everything we have learned in one place and present one rewarding and one non-rewarding trial:\n\n-   we present the fixation for 1s\n\n-   we present one of the two cues for 3s\n\n-   we wait 750ms of blank screen\n\n-   we present the reward or the non-reward depending on the cue for 2s.\n\nIn the end we also close the window.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n###### 1st Trial ######\n\n### Present the fixation\nwin.flip() # we flip to clean the window\n\nfixation.draw()\nwin.flip()\ncore.wait(1)  # wait for 1 second\n\n### Present the winning cue\ncircle.draw()\nwin.flip()\ncore.wait(3)  # wait for 3 seconds\n\n### Present the reward \nwinning.draw()\nwin.flip()\nwinning_sound.play()\ncore.wait(2)  # wait for 1 second\nwin.flip()    # we re-flip at the end to clean the window\n\n###### 2nd Trial ######\n\n### Present the fixation\nwin.flip() # we flip to clean the window\n\nfixation.draw()\nwin.flip()\ncore.wait(1)  # wait for 1 second\n\n### Present the non-rewarding cue\nsquare.draw()\nwin.flip()\ncore.wait(3)  # wait for 3 seconds\n\n### Present the reward \nlosing.draw()\nwin.flip()\nlosing_sound.play()\ncore.wait(2)  # wait for 2 second\nwin.flip()    # we re-flip at the end to clean the window\n\n\nwin.close()  # let's close the window at the end of the trial\n```\n:::\n\n\n## ISI\n\nAmazing, we've got two trials! But, these trials are back-to-back, which isn't typically what we want. More often, we prefer a brief gap between trials, known as the Inter Stimulus Interval (ISI). We could introduce this interval by simply adding a `core.wait(1)`, which would pause the script for a second. However, I'd like to introduce you to an alternative method to wait for this second, which will be useful in future tutorials.\n\nTo implement this ISI, we'll create a psychopy `core.Clock()`. Once initiated, this clock begins to keep track of time, allowing us to check how much time has elapsed since the clock started at any given moment. We'll then use a `while` loop to monitor the elapsed time and break this loop once a second has passed.\n\nThe `while` loop is a loop that will keep doing the same thing over and over again as long as a certain condition is true, here the passing of 1s.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n### ISI\nclock = core.Clock() # start clock\nwhile clock.getTime() < 1:\n    pass\n```\n:::\n\n\nPerfect we can now add this at the end of our trials!!\n\n## Stop the experiment\n\nFantastic, we've nearly have our study! However, studies often don't run to completion, especially when we're working with infants and children. More often than not, we need to halt the study prematurely. This could be due to the participant becoming fatigued or distracted, or perhaps we need to tweak some settings.\n\nHow can we accomplish this? Of course, we could just shut down Python and let the experiment crash... but surely, there's a more elegant solution... And indeed, there is! In fact, there are numerous methods to achieve this, and we're going to demonstrate one of the most straightforward and flexible ones to you.\n\nWe can use theÂ `event.getKeys()`Â function to ask Psychopy to report any key that has been pressed during our trial. In our case, we will check if theÂ ESCÂ key has been pressed and if it has, we will simply close the window and stop the study.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n### Check for closing experiment\nkeys = event.getKeys() # collect list of pressed keys\nif 'escape' in keys:\n    win.close()  # close window\n    core.quit()  # stop study\n```\n:::\n\n\n::: callout-important\nYou can add this check for closing the study at any point during the study. However, we recommend placing it at the end of each trial. This ensures that even if you stop the experiment, you will have a complete trial, making it easier to analyze data since you won\\'t have any incomplete sections of the study.\n\nAlso, you can use this same method to pause the study or interact with its progress in general.\n:::\n\n## Create an entire experiment\n\nIn an experiment, we want more than 1 trial. Let's then create an experiment with 10 trials. We just need to repeat what we have done above multiple times. However, we need to randomize the type of trials, otherwise, it would be too easy to learn. To do so, we will create a list of `0` and `1`. where `0` would identify a rewarding trial and `1` would index a non-rewarding trial.\n\nTo properly utilize this list of `0` and `1`, we will need to create other lists of our stimuli. This will make it easier to call the right stimuli depending on the trial. We can do so by:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Create list of trials in which 0 means winning and 1 means losing\nTrials = [0, 1, 0, 0, 1, 0, 1, 1, 0, 1 ]\n\n# List of stimuli\ncues = [circle, square] # put both cues in a list\nrewards = [winning, loosing] # put both rewards in a list\nsounds = [winning_sound,losing_sound] # put both sounds in a list\n```\n:::\n\n\nPerfect!! Now we can put all the pieces together and run our experiment.\n\n::: callout-note\nIn this final script, we will change the dimension of the window we will use. Since in most of the experiments, we will want to use the entire screen to our disposal, we will set `fullscr = True` when defining the window. In addition, we will also change the position of the rewarding and non-rewarding stimulus since now the window is bigger.\n:::\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Import some libraries from PsychoPy and others\nimport os\nfrom psychopy import core\nfrom psychopy import visual  \nfrom psychopy import sound\n\n\n\n#%% Load and prepare stimuli\n\n# Setting directory of our experiment\nos.chdir(r'C:\\Users\\tomma\\OneDrive - Birkbeck, University of London\\TomassoGhilardi\\PersonalProj\\BCCCD')\n\n# Winsize\nwinsize = (1920, 1080)\n\n# create a window\nwin = visual.Window(size = winsize,fullscr=False, units=\"pix\", pos =(0,30), screen=1)\n\n# Load images\nfixation = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\fixation.png', size = (200, 200))\ncircle   = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\circle.png', size = (200, 200))\nsquare   = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\square.png', size = (200, 200))\nwinning  = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\winning.png', size = (200, 200), pos=(560,0))\nloosing  = visual.ImageStim(win, image='EXP\\\\getting_started_psychopy\\\\loosing.png', size = (200, 200), pos=(-560,0))\n\n# Load sound\nwinning_sound = sound.Sound('EXP\\\\getting_started_psychopy\\\\winning.wav')\nlosing_sound = sound.Sound('EXP\\\\getting_started_psychopy\\\\loosing.wav')\n\n# List of stimuli\ncues = [circle, square] # put both cues in a list\nrewards = [winning, loosing] # put both rewards in a list\nsounds = [winning_sound,losing_sound] # put both sounds in a list\n\n# Create list of trials in which 0 means winning and 1 means losing\nTrials = [0, 1, 0, 0, 1, 0, 1, 1, 0, 1 ]\n\n\n\n#%% Trials\n\nfor trial in Trials:\n\n    ### Present the fixation\n    win.flip() # we flip to clean the window\n\n    fixation.draw()\n    win.flip()\n    core.wait(1)  # wait for 1 second\n\n\n    ### Present the cue\n    cues[trial].draw()\n    win.flip()\n    core.wait(3)  # wait for 3 seconds\n\n\n    ### Present the reward\n    rewards[trial].draw()\n    win.flip()\n    sounds[trial].play()\n    core.wait(2)  # wait for 1 second\n    win.flip()    # we re-flip at the end to clean the window\n\n    ### ISI\n    clock = core.Clock() # start clock\n    while clock.getTime() < 1:\n        pass\n    \nwin.close()\n```\n:::\n\n\n# END\n\nWe have our basic experiment and if you have followed up to here you should be able to get along with the basic concepts of PsychoPy!! **Well done!!!**.\n\n",
    "supporting": [
      "GettingStartedWithPsychopy_files"
    ],
    "filters": [],
    "includes": {}
  }
}