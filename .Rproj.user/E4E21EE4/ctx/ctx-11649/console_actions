{
    "type": [
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "> ",
        "library(tidyverse)",
        "── \u001B[1mAttaching core tidyverse packages\u001B[22m ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 2.0.0 ──\n\u001B[32m✔\u001B[39m \u001B[34mdplyr    \u001B[39m 1.1.3     \u001B[32m✔\u001B[39m \u001B[34mreadr    \u001B[39m 2.1.4\n\u001B[32m✔\u001B[39m \u001B[34mforcats  \u001B[39m 1.0.0     \u001B[32m✔\u001B[39m \u001B[34mstringr  \u001B[39m 1.5.0\n\u001B[32m✔\u001B[39m \u001B[34mggplot2  \u001B[39m 3.4.3     \u001B[32m✔\u001B[39m \u001B[34mtibble   \u001B[39m 3.2.1\n\u001B[32m✔\u001B[39m \u001B[34mlubridate\u001B[39m 1.9.2     \u001B[32m✔\u001B[39m \u001B[34mtidyr    \u001B[39m 1.3.0\n\u001B[32m✔\u001B[39m \u001B[34mpurrr    \u001B[39m 1.0.2     \n",
        "── \u001B[1mConflicts\u001B[22m ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mfilter()\u001B[39m masks \u001B[34mstats\u001B[39m::filter()\n\u001B[31m✖\u001B[39m \u001B[34mdplyr\u001B[39m::\u001B[32mlag()\u001B[39m    masks \u001B[34mstats\u001B[39m::lag()\n\u001B[36mℹ\u001B[39m Use the \u001B]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001B]8;;\u0007 to force all conflicts to become errors\n",
        "> ",
        "library(zoo)",
        "\nAttaching package: ‘zoo’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    as.Date, as.Date.numeric\n\n",
        "> ",
        "# Functions ------------------------------------------------------------",
        "> ",
        "",
        "> ",
        "#### Running correlation",
        "> ",
        "calculate_running_correlation <- function(Matrix, window_sizeP) {",
        "+ ",
        "",
        "+ ",
        "    # Define a function to calculate correlation for each window",
        "+ ",
        "  calc_correlation <- function(window_rows) {",
        "+ ",
        "    ",
        "+ ",
        "    if (sum(is.na(window_rows)) > 0.75*prod(dim(window_rows))){",
        "+ ",
        "      return(NA)",
        "+ ",
        "      ",
        "+ ",
        "    } else {",
        "+ ",
        "      # Calculate the correlation matrix for the rows in the current window",
        "+ ",
        "      correlation_matrix <- cor(window_rows, use = \"pairwise.complete.obs\")",
        "+ ",
        "      correlation = average_fisher_z_transform(correlation_matrix)",
        "+ ",
        "      return(correlation)",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  # Use rollapply to apply the function to each rolling window in the Matrix",
        "+ ",
        "  correlation_matrices <- rollapply(Matrix, width = window_sizeP, FUN = calc_correlation,",
        "+ ",
        "                                    by.column = FALSE, align = \"center\", partial = TRUE)",
        "+ ",
        "  ",
        "+ ",
        "  # Return the list of correlation matrices",
        "+ ",
        "  return(correlation_matrices)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#### Extract Average normalized person correlation",
        "> ",
        "average_fisher_z_transform <- function(corr_matrix, threshold = 0.75) {",
        "+ ",
        "  # Check if more than a given threshold of the columns have a NA",
        "+ ",
        "  if(sum(colSums(is.na(corr_matrix)) >= ncol(corr_matrix)-1) > threshold*ncol(corr_matrix)) {",
        "+ ",
        "    return(NA)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # Take the lower triangle, excluding the diagonal",
        "+ ",
        "  lower_tri <- corr_matrix[lower.tri(corr_matrix)]",
        "+ ",
        "  ",
        "+ ",
        "  # Apply Fisher's z transformation using atanh",
        "+ ",
        "  z_scores <- atanh(lower_tri)",
        "+ ",
        "  ",
        "+ ",
        "  # Calculate the mean of z_scores",
        "+ ",
        "  average_z_score <- mean(z_scores, na.rm = TRUE)",
        "+ ",
        "  ",
        "+ ",
        "  # Transform back to the correlation scale using tanh",
        "+ ",
        "  average_correlation <- tanh(average_z_score)",
        "+ ",
        "  ",
        "+ ",
        "  return(average_correlation)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Read Data and settings ------------------------------------------------------------",
        "> ",
        "",
        "> ",
        "Hz = 20",
        "> ",
        "Tresh =  0.75",
        "> ",
        "window_sizeP = Hz*2 # Window to calculate the rolling correlation over",
        "> ",
        "",
        "> ",
        "db = read.csv('C:\\\\Users\\\\tomma\\\\OneDrive - Birkbeck, University of London\\\\PupilDilationSync_2023\\\\Data\\\\ProcessedData\\\\FinalData.csv', sep = ',')",
        "> ",
        "",
        "> ",
        "output_dir = 'C:\\\\Users\\\\tomma\\\\OneDrive - Birkbeck, University of London\\\\PupilDilationSync_2023\\\\Data\\\\ProcessedData\\\\'",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Prepare data for synchrony ------------------------------------------------------------",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Extract correlation in Pupil ------------------------------------------------------------",
        "> ",
        "",
        "> ",
        "######## Adults ########",
        "> ",
        "Adults = db %>%",
        "+ ",
        "  filter(Group == 'Adults') %>%",
        "+ ",
        "  arrange(Stimulus) %>%",
        "+ ",
        "  pivot_wider(names_from = Subject, values_from = Pupil,",
        "+ ",
        "              id_cols = c( \"Seconds\", \"Stimulus\")) ",
        "> ",
        "",
        "> ",
        "ByStimulus = Adults %>%",
        "+ ",
        "  split(.$Stimulus)",
        "> ",
        "",
        "> ",
        "ByStimulus = lapply(ByStimulus, function(df) df %>% select(-1:-2))",
        "> ",
        "",
        "> ",
        "Res = lapply(ByStimulus , calculate_running_correlation, window_sizeP = window_sizeP)",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "Adults$PupilSynch = unlist(Res,use.names=FALSE)",
        "> ",
        "",
        "> ",
        "Adults = Adults %>%",
        "+ ",
        "  mutate(PupilSynch = unlist(Res,use.names=FALSE),",
        "+ ",
        "         Group = 'Children')%>%",
        "+ ",
        "  select(Seconds, Group, Stimulus, PupilSynch )",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "######## Children ########",
        "> ",
        "",
        "> ",
        "Children = db %>%",
        "+ ",
        "  filter(Group == 'Children') %>%",
        "+ ",
        "  arrange(Stimulus) %>%",
        "+ ",
        "  pivot_wider(names_from = Subject, values_from = Pupil,",
        "+ ",
        "              id_cols = c( \"Seconds\", \"Stimulus\")) ",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "ByStimulus = Children %>% split(.$Stimulus)",
        "> ",
        "ByStimulus = lapply(ByStimulus, function(df) df %>% select(-1:-2))",
        "> ",
        "",
        "> ",
        "Res = lapply(ByStimulus , calculate_running_correlation, window_sizeP = window_sizeP)",
        "There were 50 or more warnings (use warnings() to see the first 50)",
        "\n",
        "> ",
        "",
        "> ",
        "Children = Children %>%",
        "+ ",
        "  mutate(PupilSynch = unlist(Res,use.names=FALSE),",
        "+ ",
        "         Group = 'Children')%>%",
        "+ ",
        "  select(Seconds,Group, Stimulus, PupilSynch )",
        "> ",
        "library(parallel)",
        "> ",
        "library(foreach)",
        "\nAttaching package: ‘foreach’\n\n",
        "The following objects are masked from ‘package:purrr’:\n\n    accumulate, when\n\n",
        "> ",
        "# Prepare cluster",
        "> ",
        "cl = makeCluster(6)",
        "> ",
        "# Load libraries on each node",
        "> ",
        "clusterEvalQ(cl, {",
        "+ ",
        "  library(tidyverse)",
        "+ ",
        "  library(zoo)",
        "+ ",
        "})",
        "[[1]]\n [1] \"zoo\"       \"lubridate\" \"forcats\"   \"stringr\"   \"dplyr\"     \"purrr\"     \"readr\"     \"tidyr\"     \"tibble\"    \"ggplot2\"   \"tidyverse\" \"stats\"     \"graphics\"  \"grDevices\"\n[15] \"utils\"     \"datasets\"  \"methods\"   \"base\"     \n\n[[2]]\n [1] \"zoo\"       \"lubridate\" \"forcats\"   \"stringr\"   \"dplyr\"     \"purrr\"     \"readr\"     \"tidyr\"     \"tibble\"    \"ggplot2\"   \"tidyverse\" \"stats\"     \"graphics\"  \"grDevices\"\n[15] \"utils\"     \"datasets\"  \"methods\"   \"base\"     \n\n[[3]]\n [1] \"zoo\"       \"lubridate\" \"forcats\"  ",
        " \"stringr\"   \"dplyr\"     \"purrr\"     \"readr\"     \"tidyr\"     \"tibble\"    \"ggplot2\"   \"tidyverse\" \"stats\"     \"graphics\"  \"grDevices\"\n[15] \"utils\"     \"datasets\"  \"methods\"   \"base\"     \n\n[[4]]\n [1] \"zoo\"       \"lubridate\" \"forcats\"   \"stringr\"   \"dplyr\"     \"purrr\"     \"readr\"     \"tidyr\"     \"tibble\"    \"ggplot2\"   \"tidyverse\" \"stats\"     \"graphics\"  \"grDevices\"\n[15] \"utils\"     \"datasets\"  \"methods\"   \"base\"     \n\n[[5]]\n [1] \"zoo\"       \"lubridate\" \"forcats\"   \"stringr\"   \"dplyr\"     \"purrr\"     \"readr\"    ",
        " \"tidyr\"     \"tibble\"    \"ggplot2\"   \"tidyverse\" \"stats\"     \"graphics\"  \"grDevices\"\n[15] \"utils\"     \"datasets\"  \"methods\"   \"base\"     \n\n[[6]]\n [1] \"zoo\"       \"lubridate\" \"forcats\"   \"stringr\"   \"dplyr\"     \"purrr\"     \"readr\"     \"tidyr\"     \"tibble\"    \"ggplot2\"   \"tidyverse\" \"stats\"     \"graphics\"  \"grDevices\"\n[15] \"utils\"     \"datasets\"  \"methods\"   \"base\"     \n\n",
        "> ",
        "clusterExport(cl, c(\"calculate_running_correlation\", \"average_fisher_z_transform\"))",
        "> ",
        "library(doParallel)",
        "Loading required package: iterators\n",
        "> ",
        "registerDoParallel()",
        "> ",
        "res= list()",
        "> ",
        "# Parallelize loop using foreach()",
        "> ",
        "foreach(x = 1:10, .packages = c(\"parallel\", \"tidyverse\", \"zoo\")) %dopar% {",
        "+ ",
        "  print(x)",
        "+ ",
        "  Sub = sample(3:20, 9)",
        "+ ",
        "  ",
        "+ ",
        "  ByStimulus = Children %>% select(all_of(c(1,2,Sub))) %>% split(.$Stimulus)",
        "+ ",
        "  ByStimulus = lapply(ByStimulus, function(df) df %>% select(-1:-2))",
        "+ ",
        "  ",
        "+ ",
        "  Res = parLapply(cl, ByStimulus , calculate_running_correlation, window_sizeP = window_sizeP)",
        "+ ",
        "  ",
        "+ ",
        "  Chil =  unlist(Res,use.names=FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  res[[x]]= t.test(Chil, Adults$PupilSynch)",
        "+ ",
        "",
        "+ ",
        "}",
        "Error in { : task 1 failed - \"Can't subset columns past the end.\n\u001B[38;5;250m\u001B[36mℹ\u001B[38;5;250m Locations 16, 18, 12, …, 7, and 6 don't exist.\n\u001B[36mℹ\u001B[38;5;250m There are only 4 columns.\u001B[39m\"\n",
        "> ",
        "for (x in 1:10){",
        "+ ",
        "  print(x)",
        "+ ",
        "  Sub = sample(3:20, 9)",
        "+ ",
        "  ",
        "+ ",
        "  ByStimulus = Children %>% select(all_of(c(1,2,Sub))) %>% split(.$Stimulus)",
        "+ ",
        "  ByStimulus = lapply(ByStimulus, function(df) df %>% select(-1:-2))",
        "+ ",
        "  ",
        "+ ",
        "  Res = parLapply(cl, ByStimulus , calculate_running_correlation, window_sizeP = window_sizeP)",
        "+ ",
        "  ",
        "+ ",
        "  Chil =  unlist(Res,use.names=FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  res[[x]]= t.test(Chil, Adults$PupilSynch)",
        "+ ",
        "  ",
        "+ ",
        "}",
        "[1] 1\n\u001B[1m\u001B[33mError\u001B[39m in `select()`:\u001B[22m\n\u001B[33m!\u001B[39m Can't subset columns past the end.\n\u001B[38;5;250m\u001B[36mℹ\u001B[38;5;250m Locations 10, 15, 11, …, 13, and 7 don't exist.\n\u001B[36mℹ\u001B[38;5;250m There are only 4 columns.\u001B[39m\n\u001B[90mRun `\u001B]8;;rstudio:run:rlang::last_trace()\u0007rlang::last_trace()\u001B]8;;\u0007` to see where the error occurred.\u001B[39m\n",
        "> ",
        "Children = db %>%",
        "+ ",
        "  filter(Group == 'Children') %>%",
        "+ ",
        "  arrange(Stimulus) %>%",
        "+ ",
        "  pivot_wider(names_from = Subject, values_from = Pupil,",
        "+ ",
        "              id_cols = c( \"Seconds\", \"Stimulus\")) ",
        "> ",
        "###",
        "> ",
        "res = list()",
        "> ",
        "for (x in 1:10){",
        "+ ",
        "  print(x)",
        "+ ",
        "  Sub = sample(3:20, 9)",
        "+ ",
        "  ",
        "+ ",
        "  ByStimulus = Children %>% select(all_of(c(1,2,Sub))) %>% split(.$Stimulus)",
        "+ ",
        "  ByStimulus = lapply(ByStimulus, function(df) df %>% select(-1:-2))",
        "+ ",
        "  ",
        "+ ",
        "  Res = parLapply(cl, ByStimulus , calculate_running_correlation, window_sizeP = window_sizeP)",
        "+ ",
        "  ",
        "+ ",
        "  Chil =  unlist(Res,use.names=FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  res[[x]]= t.test(Chil, Adults$PupilSynch)",
        "+ ",
        "  ",
        "+ ",
        "}",
        "[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n",
        "> ",
        "Children = db %>%",
        "+ ",
        "  filter(Group == 'Children') %>%",
        "+ ",
        "  arrange(Stimulus) %>%",
        "+ ",
        "  pivot_wider(names_from = Subject, values_from = Pupil,",
        "+ ",
        "              id_cols = c( \"Seconds\", \"Stimulus\")) ",
        "> ",
        "res= list()",
        "> ",
        "# Parallelize loop using foreach()",
        "> ",
        "foreach(x = 1:10, .packages = c(\"parallel\", \"tidyverse\", \"zoo\")) %dopar% {",
        "+ ",
        "  print(x)",
        "+ ",
        "  Sub = sample(3:20, 9)",
        "+ ",
        "  ",
        "+ ",
        "  ByStimulus = Children %>% select(all_of(c(1,2,Sub))) %>% split(.$Stimulus)",
        "+ ",
        "  ByStimulus = lapply(ByStimulus, function(df) df %>% select(-1:-2))",
        "+ ",
        "  ",
        "+ ",
        "  Res = parLapply(cl, ByStimulus , calculate_running_correlation, window_sizeP = window_sizeP)",
        "+ ",
        "  ",
        "+ ",
        "  Chil =  unlist(Res,use.names=FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  res[[x]]= t.test(Chil, Adults$PupilSynch)",
        "+ ",
        "",
        "+ ",
        "}",
        "Error in { : task 1 failed - \"invalid connection\"\n",
        "> ",
        "res= list()",
        "> ",
        "Children = db %>%",
        "+ ",
        "  filter(Group == 'Children') %>%",
        "+ ",
        "  arrange(Stimulus) %>%",
        "+ ",
        "  pivot_wider(names_from = Subject, values_from = Pupil,",
        "+ ",
        "              id_cols = c( \"Seconds\", \"Stimulus\")) ",
        "> ",
        "res= list()",
        "> ",
        "# Parallelize loop using foreach()",
        "> ",
        "foreach(x = 1:10, .packages = c(\"parallel\", \"tidyverse\", \"zoo\")) %dopar% {",
        "+ ",
        "  print(x)",
        "+ ",
        "  Sub = sample(3:20, 9)",
        "+ ",
        "  ",
        "+ ",
        "  ByStimulus = Children %>% select(all_of(c(1,2,Sub))) %>% split(.$Stimulus)",
        "+ ",
        "  ByStimulus = lapply(ByStimulus, function(df) df %>% select(-1:-2))",
        "+ ",
        "  ",
        "+ ",
        "  Res = lapply( ByStimulus , calculate_running_correlation, window_sizeP = window_sizeP)",
        "+ ",
        "  ",
        "+ ",
        "  Chil =  unlist(Res,use.names=FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  res[[x]]= t.test(Chil, Adults$PupilSynch)",
        "+ ",
        "",
        "+ ",
        "}",
        "\nRestarting R session...\n\n"
    ]
}